
@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="DocUpdateCtrl">

    <div class="box-header with-border">
        <div class="row">
            <div class="col-lg-6">
                <i class="fa  fa-table"></i>
                <h3 class="box-title">Update Document</h3>
            </div>

            <div class="col-lg-6">
                <table class="pull-right">
                    <tr>
                        <td>
                            <div class="input-group">
                                <input type="text" name="q" class="form-control" style="margin-top: 1px;height: 34px;" ng-model="pagingInfo.search" placeholder="Search...">
                                <span class="input-group-btn">
                                    <button type="button" name="search" id="search-btn" class="btn btn-flat" ng-click="search()"><i class="fa fa-search"></i> Search </button>
                                </span>
                            </div>
                        </td>
                        <td>
                            <div class="box-tools ">
                                <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-default btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div class="box-body">
        <input type="hidden" ng-model="docPropIdentityModel.DocumentID" />
        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                            ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels
                        track by ownerLevel.OwnerLevelID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.Owner"
                            data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">

                    <select ui-select2="{ allowClear: true}" id="select-optionCat" ng-model="docPropIdentityModel.DocCat" data-placeholder="Document Category"
                            style="width:100%;" class="form-control">
                        <option value=""></option>
                        <option ng-repeat="item in DocCatForOwner" value="{{item.DocCategoryID}}">{{item.DocCategoryName}}</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Doc Sub Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">

                    <select ui-select2="{ allowClear: true}" id="select-option" ng-model="docPropIdentityModel.DocType" data-placeholder="Document Sub Category" style="width:100%;" class="form-control">
                        <option value=""></option>
                        <option ng-repeat="item in DocTypeForOwner" value="{{item.DocTypeID}}">{{item.DocTypeName}}</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Documents</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select class="form-control" data-ng-model="docPropIdentityModel.DocProperty"
                        data-ng-options="docProperty as docProperty.DocPropertyName for docProperty in docPropertyForSpecificDocType track by docProperty.DocPropertyID"
                        data-ng-disabled="!docPropIdentityModel.DocType">
                    <option value="">--Select--</option>
                </select>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <label>Search By</label>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select data-ng-model="docPropIdentityModel.SearchBy" class="form-control" data-ng-disabled="!docPropIdentityModel.DocProperty">
                    <option value="1" selected>Required Attribute</option>
                    <option value="0">Optional Attribute</option>
                </select>
            </div>
        </div>
        <br />
        <div class="row">
            <table class="table table-condensed table-bordered table-striped table-hover">
                <thead>
                    <tr>
                        <th>Document Name</th>
                        <th>Identificaiton Attribute</th>
                        <th>Attribute Value</th>
                        <th class="hidden">FileServerURL</th>
                        <th>Action</th>
                    </tr>
                    <tr>
                        <th colspan="2">
                            <input placeholder="Attribute Name" class="input-sm form-control" ng-model="AttrName" type="text" />
                        </th>
                        <th>
                            <input placeholder="Attribute Value" class="input-sm form-control" ng-model="AttrValue" type="text" />
                        </th>
                        <th>
                            <button type="button" class="btn btn-primary" ng-click="search()" ng-disabled="AttrName=='' || AttrValue==''">Search</button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr ng-repeat="row in GridDisplayCollection">
                        <td class="hidden">{{row.DocumentID}}</td>
                        <td class="hidden">{{row.DocDistributionID}}</td>
                        <td class="col-lg-2">{{row.DocPropertyName}}</td>
                        <td class="col-lg-3">{{row.DocPropIdentifyName}}</td>
                        <td class="col-lg-3">{{row.MetaValue}}</td>
                        <td class="hidden">{{row.FileServerURL}}</td>
                        <td class="col-lg-4">
                            <button type="button" class="btn btn-xs btn-success btn-flat" data-ng-click="SelectImage(row)" style="display: inline-block;"><i class="fa fa-list"></i>Select</button>
                            <button type="button" class="btn btn-xs btn-primary btn-flat" data-ng-click="toggleEdit(row)" style="display: inline-block;"><i class="fa fa-edit"></i> Edit</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    <!-- /.col -->
                    <div class="col-md-10">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h4 class="box-title">Process Documents:</h4>
                            </div>
                            <div class="box-body no-padding">                              

                                <div class="row" ng-show="uploadType==2">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-10">
                                        <input type="file" id="FileUpload1" multiple />
                                    </div>
                                </div>
                                <div class="row" ng-hide="uploadType==2">
                                    <div class="col-lg-12">
                                        <div id="dwtHorizontalThumbnil"></div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div id="external-events">
                                        <div class="col-lg-6">
                                            <div class="external-event bg-gray " style="position: relative;">
                                                Scanner
                                                <select id="source" class="form-control"></select>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- /.box-body -->
                        </div>
                        <!-- /. box -->
                    </div>
                    <!-- /.col -->

                    <div class="col-md-2" style="padding-left:0px;">
                        <div class="box box-info">
                            <div class="box-header with-border">
                                <h4 class="box-title">Options</h4>
                            </div>
                            <div class="box-body">
                                <!-- the events -->
                                <div id="external-events">
                                    <div class="external-event bg-yellow " ng-click="AcquireImage();" style="position: relative;">
                                        <i class="fa fa-print"></i> Scan
                                    </div>
                                    <div class="external-event bg-aqua " ng-click="LoadImage()" style="position: relative;">
                                        <i class="fa fa-inbox"></i> Load PDF
                                    </div>
                                    <div ng-click="RemoveAllSelectedImages()" class="external-event bg-light-blue " style="position: relative;">
                                        <i class="fa fa-remove"></i> Remove
                                    </div>
                                    <div ng-click="RotateRight()" class="external-event bg-red " style="position: relative;">
                                        <i class="fa fa-rotate-right"></i> Rotate
                                    </div>
                                    <div data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne" ng-click="ShowMoveImageDiv()" class="external-event bg-green" style="position: relative;">
                                        <i class="fa fa-reorder"></i> Move Image
                                    </div>
                                    <div id="collapseOne" aria-expanded="false" class="collapse"
                                         style="position: relative; background-color: #baf1d4; border:solid;border-color:green;">
                                        <div style="background-color: #baf1d4">
                                            <div class="form-group">
                                                <label style="color:green">Which Image</label><input type="text" id="WhichImage" style="width: 100%; color: green" />
                                            </div>
                                            <div class="form-group">
                                                <label style="color:green">Where</label><input type="text" id="Where" style="width: 100%; color: green" />
                                            </div>
                                            <div class="form-group">
                                                <button class="btn btn-success btn-flat btn-sm" ng-click="MoveImage()">Move</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- /.box-body -->
                        </div>
                    </div>
                </div>
                <!-- /.row -->
            </div>
        </div>

        <div class="box-footer with-border">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <button type="button" id="btnSave" class="btn btn-lg btn-primary btn-flat pull-right btnSave" data-ng-click="ShowConfirmModal()"><i class="fa fa-save"></i> Save</button>
                </div>
            </div>
        </div>
    </div>

    <div id="viewerModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Image Viewer</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>

                        <div id="dwtLargeViewer" class="box-body"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="mydiv" data-ng-show="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" /> <span class="text-bold">Loading...</span>
            </div>
        </div>
    </div>

    <div id="ConfirmSave" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title">Are You Sure?</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <h4>You Want to Upload the Documents?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="" class="btn btn-danger" ng-disabled="loading" data-ng-click="SaveImage()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <form name="myForm" ng-submit="" novalidate>
        <div class="bs-example">
            <!-- Modal HTML -->
            <div id="addModal" class="modal fade">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" ng-click="ResetModel()" aria-hidden="true">x</button>
                            <h3 class="modal-title">Change Attribute Value</h3>
                        </div>
                        <div class="modal-body">
                            <div class="box-body">
                                <div class="row">
                                    <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
                                        <div class="form-group">
                                            <label for="{{item.DocMetaID}}" class="control-label">{{item.DocPropIdentifyName}}</label>
                                            <input type="text" name="{{item.DocMetaID}}" id="{{item.DocMetaID}}" ng-model="item.MetaValue" ng-required="true" class="form-control" />
                                            <span class="label label-danger" ng-show="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">{{item.DocPropIdentifyName}} is Required.</span>
                                            <span ng-hide="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">&nbsp;</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    <button type="button" data-ng-click="SaveMeta()" class="btn btn-primary btn-flat" ng-disabled="myForm.$invalid || loading">Save</button>
                                    <button type="button" class="btn btn-default btn-flat" data-dismiss="modal" ng-click="ResetModel()">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.install.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>

<script type="text/javascript">
    app.controller('DocUpdateCtrl', function ($scope, $http) {
        applySecurity();
        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        var zoomFactor = .5;

        $scope.docPropIdentityModel = {
            DocumentID: "",
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            SearchBy: 1,
            SearchFor: "",
            Status: "",
            DocCat: '',
            //DocCat: [],
            DocType: '',
            DocMetaValues: []
        };

        $scope.pagingInfo = {
            page: 1,
            itemsPerPage: 20,
            sortBy: null,
            reverse: false,
            search: null,
            totalItems: 0
        };

        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtHorizontalThumbnil');

            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;


            DWObject.SetViewMode(4, -1);
            DWObject.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
            DWObject.JPEGQuality = 20;
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;
            DWObject.RegisterEvent('OnMouseDoubleClick', $scope.updateLargeViewer);
            DWObject.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                DWObject.Erase(sImageIndex, left, top, right, bottom);

            });


            if (DWObject) {
                var count = DWObject.SourceCount;
                if (count == 0 && Dynamsoft.Lib.env.bMac) {
                    DWObject.CloseSourceManager();
                    DWObject.ImageCaptureDriverType = 0;
                    DWObject.OpenSourceManager();
                    count = DWObject.SourceCount;
                }

                for (var i = 0; i < count; i++)
                    document.getElementById("source").options.add(new Option(DWObject.GetSourceNameItems(i), i)); // Get Data Source names from Data Source Manager and put them in a drop-down box
            }
        };

        $scope.ResetImageViewrs = function () {
            DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();
        }

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };

        $scope.ShowAttributes = 0;

        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevelNew?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                $scope.docPropIdentityModel.OwnerLevel = response.result[0];
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });

        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal, oldVal) {
            if (newVal) {
                if (newVal != "" && newVal != oldVal) {
                    $scope.docPropIdentityModel.Owner = "";
                    $scope.docPropIdentityModel.DocCategory = "";
                    $scope.docPropIdentityModel.DocType = "";
                    $scope.docPropIdentityModel.DocProperty = "";
                    $scope.OwnerDisable = false;

                    $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                        { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                        .success(function (response) {
                            $scope.ownersForSpecificOwnerLevel = response.result;
                            $scope.docPropIdentityModel.Owner = response.result[0];
                            $scope.loading = false;
                        }).error(function () {
                            $scope.loading = false;
                        });
                }
            }
        });

        $scope.DocCatForOwner = [];
        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.CatDisable = false;

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.DocCatForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.DocTypeForOwner = [];
        $scope.$watch('docPropIdentityModel.DocCat', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.CatDisable = false;

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.DocTypeForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocType', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.DocumentDisable = false;

                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocType
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                        //$scope.BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocProperty', function (newVal, oldVal) {
            if (newVal) {
                $scope.BindDataToGrid();
                $scope.ResetImageViewrs();
            }
        });

        $scope.BindDataToGrid = function () {
            $scope.loading = true;
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocumentsBySearchParamForVersion',
            {
                _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                _DocTypeID: $scope.docPropIdentityModel.DocType,
                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
                _SearchBy: $scope.docPropIdentityModel.SearchBy,
                page: $scope.pagingInfo.page,
                itemsPerPage: $scope.pagingInfo.itemsPerPage,
                sortBy: $scope.pagingInfo.itemsPerPage,
                reverse: $scope.pagingInfo.reverse,
                attribute: $scope.AttrName,
                search: $scope.AttrName == '' ? $scope.pagingInfo.search : $scope.AttrValue
            })
            .success(function (pageable) {
                $scope.GridDisplayCollection = pageable.lstDocSearch;
                $scope.pagingInfo.totalItems = pageable.totalPages;
                mailNotify = pageable.mail;
                
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });
        };

        $scope.Obj = {
            OwnerLevelID: "",
            OwnerID: "",
            DocPropertyID: "",
            DocTypeID: "",
            DocCategoryID: "",
            DocumentID: ""
        };

        $scope.SelectImage = function (tableRow, e) {
            $scope.Obj.OwnerLevelID = tableRow.OwnerLevelID;
            $scope.Obj.OwnerID = tableRow.OwnerID;
            $scope.docPropIdentityModel.DocCat = tableRow.DocCategoryID;

            $scope.docPropIdentityModel.DocType = tableRow.DocTypeID;

            $scope.Obj.DocPropertyID = tableRow.DocPropertyID;
            $scope.Obj.DocTypeID = tableRow.DocTypeID;
            $scope.Obj.DocCategoryID = tableRow.DocCategoryID;
            $scope.Obj.DocumentID = tableRow.DocumentID;
            $scope.OriginalDocURL = (tableRow.FileServerURL + "//" + tableRow.DocumentID + ".pdf");

            $scope.OriginalFileServerURL = tableRow.FileServerURL;

            DWObject.IfShowFileDialog = false;
            DWObject.RemoveAllImages();
            DWObject.FTPPort = tableRow.ServerPort;
       
            DWObject.FTPUserName = tableRow.FtpUserName;
            DWObject.FTPPassword = tableRow.FtpPassword;
            DWObject.FTPDownload(tableRow.ServerIP, (tableRow.FileServerURL + "//" + tableRow.DocumentID + ".pdf"));

            $scope.ShowAttributes = 1;
        };


        $scope.AcquireImage = function () {
            if (DWObject) {
                DWObject.IfAutomaticDeskew = true;
                DWObject.IfAutoDiscardBlankpages = false;
                DWObject.AcquireImage();
            }
        };

        $scope.LoadImage = function () {
            DWObject.IfShowFileDialog = true;

            //DWObject.RemoveAllImages();
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_ALL);
        };

        $scope.RemoveAllSelectedImages = function () {
            DWObject.RemoveAllSelectedImages();
        }

        $scope.RotateRight = function () {
            DWObject.RotateRight(DWObject.GetSelectedImageIndex(0));
        }

        $scope.ShowMoveImageDiv = function () {
            $("#MoveImage").toggleClass("hidden");
        }

        $scope.MoveImage = function () {
            DWObject.MoveImage(($("#WhichImage").val() - 1), ($("#Where").val() - 1));
            $("#MoveImage").toggleClass("hidden");
        };

        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
            $('#viewerModal').modal('show');
        };

        $scope.loading = true;
        
        $scope.toggleEdit = function (tableRow) {
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSpecificDocType',
            {
                _DocumentID: tableRow.DocumentID,
                _DocDistributionID: tableRow.DocDistributionID
            })
            .success(function (response) {
                $scope.DocumentsAttributeList = response;
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });

            $('#addModal').modal('show');
        };

        var DocMetaValues = {
            MetaValue: "",
            DocMetaID: "",
            DocumentID: "",
            Remarks: "",//To Pass notifyDate
            VersionMetaValue: ""//To Pass ExpDate
        };

        var FinalObject = { "DocMetaValues": [] };

        $scope.SaveMeta = function () {
            $scope.loading = true;

            angular.forEach($scope.DocumentsAttributeList, function (item) {

                DocMetaValues.DocMetaID = item.DocMetaID;
                DocMetaValues.MetaValue = item.MetaValue;
                DocMetaValues.DocumentID = $scope.DocumentsAttributeList[0].DocID;
                DocMetaValues.Remarks = $("#notifyDate").val(),//To Pass notifyDate
                DocMetaValues.VersionMetaValue = $("#expDate").val()//To Pass ExpDate
                FinalObject.DocMetaValues.push(DocMetaValues);

                DocMetaValues = {
                    MetaValue: "",
                    DocMetaID: "",
                    DocumentID: "",
                    Remarks: "",//To Pass notifyDate
                    VersionMetaValue: ""//To Pass ExpDate
                };
            });

            $.ajax({
                url: '/DocScanningModule/DocumentUpdate/UpdateDocMetaInfoWithMailNotifyDate',
                data: JSON.stringify(FinalObject),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                success: function (response) {
                    $scope.loading = false;
                    $('#addModal').modal('hide');
                    $scope.BindDataToGrid();
                    toastr.success(response.Message);
                },
                error: function (response) {
                    $scope.loading = false;
                    toastr.error(response.Message);
                }
            });
            FinalObject = { "DocMetaValues": [] };
        }

        $scope.ShowConfirmModal = function () {
            $('#ConfirmSave').modal('show');
        };

        $scope.SaveImage = function () {

            $('#ConfirmSave').modal('hide');
            $scope.loading = true;

            if ($scope.ShowAttributes = 1) {

                $scope.Obj.DocCategoryID = $scope.Obj.DocCategoryID;
                $scope.Obj.DocTypeID = $scope.Obj.DocTypeID;
            }
            else {

                $scope.Obj.DocCategoryID = $scope.docPropIdentityModel.DocCat;
                $scope.Obj.DocTypeID = $scope.docPropIdentityModel.DocType;
            }

            $http.post('/DocScanningModule/DocModification/UpdateDocumentInfo',
                {
                    _modelDocumentsInfo: $scope.Obj
                })
                .success(function (response) {
                    DWObject.IfShowFileDialog = false;

                    var strFTPServer = response.result[0].ServerIP;                    
                    DWObject.FTPPort = response.result[0].ServerPort;
                    DWObject.FTPUserName = response.result[0].FtpUserName;
                    DWObject.FTPPassword = response.result[0].FtpPassword;

                    //var isSave = DWObject.FTPUploadAllAsPDF(strFTPServer,
                    //    response.result[0].FileServerUrl + "//" +
                    //    response.result[0].DocumentID + ".pdf", OnSuccess, OnFailure);

                    var isSave = DWObject.FTPUploadAsMultiPagePDF(strFTPServer,
                        response.result[0].FileServerUrl + "//" +
                        response.result[0].DocumentID + ".pdf");

                    

                    if (isSave) {
                        $scope.loading = false;
                        toastr.success("Upload Successful");
                        $scope.BindDataToGrid();
                        $scope.ResetImageViewrs();

                        if (response.result[0].FileServerUrl === $scope.OriginalFileServerURL) {

                        } else {
                            $http.post('/DocScanningModule/DocModification/DeleteFtpDocuments',
                                {
                                    serverIP: response.result[0].ServerIP,
                                    uri: $scope.OriginalDocURL,
                                    userName: response.result[0].FtpUserName,
                                    password: response.result[0].FtpPassword
                                }) 
                                .success(function (response) {
                                    console.log(response);
                                })
                                .error(function (response) {
                                    console.log(response);
                                });
                        }
                    } else {
                        //Take Document Info back to previous stage!
                        $scope.loading = false;
                        toastr.success("Document Upload Failed");
                    }
                })
                .error(function () {
                    $scope.loading = false;
                    toastr.success("Failed to Update Meta Data.");
                });
        };

    });
</script>