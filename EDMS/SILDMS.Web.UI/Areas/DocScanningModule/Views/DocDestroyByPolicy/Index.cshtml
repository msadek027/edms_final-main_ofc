@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="DestroyDocByPolicy" data-ng-init="init()">
    <div class="box-header with-border">
        <i class="fa fa-key"></i>
        <h3 class="box-title">Document Destroy</h3>
        <div class="box-tools pull-right">
            <button type="button" id="btnRefresh" data-ng-click="ResetModel()" class="btn btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
            <button type="button" id="btnAdd" data-ng-click="DeleteAll(GridDisplayCollection, $event)" class="btn btnSave btn-flat btn-danger pull-right btnSave" ng-disabled="loading"> 
                   <i class="fa fa-delete"></i> Delete All
            </button>
            
            <button ng-disabled="saveIsReadOnly" type="submit" id="btnSubmit" name="ReportType" ng-click="Save(GridDisplayCollection, $event)" class="btn btn-flat btn-success pull-right">
                <i class="fa fa-save"></i> Save
            </button>

        </div>
    </div>

    <div class="box-body">
        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="model.OwnerLevel"
                            ng-options="ownerLevel.OwnerLevelID as ownerLevel.LevelName for ownerLevel in ownerLevels">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
    
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label for="Owner">Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="model.Owner"
                            data-ng-options="owner.OwnerID as owner.OwnerName for owner in ownersForSpecificOwnerLevel"
                            data-ng-disabled="!model.OwnerLevel">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="model.DocCategory"
                            data-ng-options="docCategory.DocCategoryID as docCategory.DocCategoryName for docCategory in docCategoriesForSpecificOwner"
                            data-ng-disabled="!model.Owner">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Doc Sub Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="model.DocType"
                            data-ng-options="docType.DocTypeID as docType.DocTypeName for docType in docTypeForSpecificDocCategory"
                            data-ng-disabled="!model.DocCategory">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Property</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select class="form-control" data-ng-model="model.DocProperty"
                        data-ng-options="docProperty.DocPropertyID as docProperty.DocPropertyName for docProperty in docPropertyForSpecificDocType"
                        data-ng-disabled="!model.DocType">
                    <option value="">--Select--</option>
                </select>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Destroy Policies</label>
                </div>
            </div>

            <div class="col-sm-4 col-md-4 col-lg-4">
                <select class="form-control" data-ng-model="model.DestroyPolicy" data-ng-options="item.DestroyPolicyID as item.PolicyFor for item in Policies">
                    <option value="">--Select--</option>
                </select>
                <span>Nature : {{model.DocumentNature}}</span>
                
            </div>
        </div>
        <br />
        <div class="row">
            <table st-table="Policies" st-safe-src="" class="table table-condensed table-bordered table-striped table-hover" style="width:550px;">
                <thead>
                    <tr>
                        <th st-sort="">Policy Name</th>
                        <th st-sort="">Document Nature</th>
                        <th st-sort="">Action</th>
                    </tr>
                    <tr>

                        <th colspan="3">
                            <input st-search=""
                                   placeholder="Policy Search" class="input-sm form-control" type="search" />
                        </th>

                    </tr>
                </thead>
                <tbody>
                    <tr ng-repeat="row in Policies">
                        <td class="hidden">{{row.DestroyPolicyID}}</td>
                        <td class="col-lg-1">{{row.PolicyFor}}</td>
                        <td class="col-lg-1">{{row.DocumentNature}}</td>
                        <td class="col-lg-2">
                            <button type="button" class="btn btn-xs btn-warning btn-flat" data-ng-click="Select(row)" style="display: inline-block;"><i class="fa fa-search-plus"></i> Select Policy</button>
                        </td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-center">
                            <div st-pagination="" st-items-by-page="itemsByPage"></div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="row">
            <input type="button" class="btn btn-flat btn-sm pull-right" value="Select All" ng-click="SelectAll()" />
            <input type="button" class="btn btn-flat btn-sm pull-right" value="Unselect All" ng-click="UnSelectAll()" />

            <table st-table="GridDisplayCollection" st-safe-src="docPropIdentityGridData" class="table table-condensed table-bordered table-striped table-hover">
                <thead>
                    <tr>
                        <th>
                            Select
                        </th>
                        <th st-sort="DocPropertyName">Document Name</th>
                        <th st-sort="DocPropIdentifyName">Identificaiton Attribute</th>
                        <th st-sort="MetaValue">Attribute Value</th>
                        <th st-sort="FileServerURL" class="hidden">FileServerURL</th>
                        <th st-sort="SetOn">Creation Date</th>
                        <th st-sort="DeleteOn">Deletion Date</th>
                    </tr>
                    <tr>

                        <th colspan="3">
                            <input st-search=""
                                   placeholder="Document Search" class="input-sm form-control" type="search" />
                        </th>

                    </tr>
                </thead>
                <tbody>
                    <tr ng-repeat="row in GridDisplayCollection">
                        <td>
                            <input type="checkbox" class="checkbox checked" checked="checked" ng-model="row.IsChecked" />
                        </td>
                        <td class="hidden">{{row.DocMetaID}}</td>
                        <td class="hidden">{{row.DocumentID}}</td>
                        <td class="col-lg-2">{{row.DocPropertyName}}</td>
                        <td class="col-lg-3">{{row.DocPropIdentifyName}}</td>
                        <td class="col-lg-3">{{row.MetaValue}}</td>
                        <td class="hidden">{{row.FileServerURL}}</td>
                        <td class="col-lg-2">
                            {{row.SetOn | date}}
                        </td>
                        <td class="col-lg-2">
                            {{row.DeleteOn | date}}
                        </td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6" class="text-center">
                            <div st-pagination="" st-items-by-page="itemsByPage"></div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div id="mydiv" data-ng-show="loading">
            <div class="overlay">
                <i class="fa fa-refresh fa-spin"></i>Loading...
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    app.controller('DestroyDocByPolicy', ['$scope', '$http', '$routeParams', '$location', function ($scope, $http, $routeParams, $location) {
        $scope.model = {
            OwnerLevel: "",
            Owner: "",
            DocCategory: "",
            DocType: "",
            DocProperty: "",
            DestroyPolicy: ""
        };
        $scope.itemsByPage = 10;
        $scope.loading = true;
        $scope.model.OwnerLevel = "";
        //To Bind Owner Lavel Dropdown
        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                if ($location.search()._OwnerLavelID)
                {
                    $scope.model.OwnerLevel = $location.search()._OwnerLavelID;
                }
      
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });
       
        //To Bind Owner dropdown when Change Value of Owner lavel
        $scope.$watch('model.OwnerLevel', function (newVal) {

            $scope.model.Owner = "";
            $scope.model.DocCategory = "";
            $scope.model.DocType = "";
            $scope.model.DocProperty = "";
            $scope.docGridData = "";
           

            if (newVal) {
                $scope.loading = true;

                $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForOwnerLavelPolicy',
                    { _OwnerLevelID: $scope.model.OwnerLevel})
                    .success(function (response) {
                        $scope.ownersForSpecificOwnerLevel = response.result;
                        if ($location.search()._OwnerID)
                        {
                            $scope.model.Owner=$location.search()._OwnerID
                        }
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        //To bind Category Dropdown If change in Owner
        $scope.$watch('model.Owner', function (newVal) {

            $scope.model.DocCategory = "";
            $scope.model.DocType = "";
            $scope.model.DocProperty = "";
            $scope.docGridData = "";
          

            if (newVal) {
                $scope.loading = true;
                BindDataToPlicy();

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.model.Owner})
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        if ($location.search()._DocCategoryID) {
                            $scope.model.DocCategory = $location.search()._DocCategoryID
                        }
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });
        
        //To Bind Type Dropdown If Changes in Category
        $scope.$watch('model.DocCategory', function (newVal) {

            $scope.model.DocType = "";
            $scope.model.DocProperty = "";
            $scope.docGridData = "";
           

            if (newVal) {
                $scope.loading = true;
                BindDataToPlicy();

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.model.DocCategory,
                        _OwnerID: $scope.model.Owner
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        if ($location.search()._DocTypeID) {
                            $scope.model.DocType = $location.search()._DocTypeID
                        }
                        $scope.loading = false;
                    })
                    .error(function () {
                        $scope.loading = false;
                    });
            }
        });

        //Bind Document Property Dropdown
        $scope.$watch('model.DocType', function (newVal) {

            $scope.model.DocProperty = "";
            $scope.docGridData = "";
       

            if (newVal) {

                $scope.loading = true;
                BindDataToPlicy();    
               

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentPropertyForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.model.DocCategory,
                        _OwnerID: $scope.model.Owner,
                        _DocTypeID: $scope.model.DocType
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        if ($location.search()._DocPropertyID) {
                            $scope.model.DocProperty = $location.search()._DocPropertyID
                        }
                        $scope.loading = false;
                    })
                    .error(function () {
                        $scope.loading = false;
                    });
            }
        });

        //Bind Plicy if change in Doc Property
        $scope.$watch('model.DocProperty', function (newVal) {
            if (newVal) {
                $scope.loading = true;
                BindDataToPlicy();
                //BindDataToGrid();
                //$scope.Select();
                $scope.loading = false;
            }
        });

        //Change data grid if any changes happen to Destroy policy Dropdown
        $scope.$watch('model.DestroyPolicy', function (newVal) {

            $scope.docPropIdentityGridData = "";
            $scope.GridDisplayCollection = "";
            $scope.model.DocumentNature = "";

            if (newVal) {              
                BindDataToGrid();
            }    
        });


        //Function to bind data to Policy Dropdown 
        var BindDataToPlicy = function () {
            $http.post('/DocScanningModule/DocDestroyPolicy/GetDestroyPolicyBySearchParam',
                {
                    _DocCategoryID: $scope.model.DocCategory,
                    _OwnerID: $scope.model.Owner,
                    _DocTypeID: $scope.model.DocType,
                    _DocPropertyID: $scope.model.DocProperty
                })
                .success(function (response) {
                    $scope.Policies = response;
                    if ($location.search()._DestroyPolicyID) {
                        $scope.model.DestroyPolicy = $location.search()._DestroyPolicyID
                    }
                    
                }).error(function () {
                    $scope.loading = false;
                });
        }

        $scope.Select = function (tablerow, e) {

            $scope.model.DestroyPolicy = tablerow.DestroyPolicyID;
            BindDataToGrid();
        }


        //Function To bind data to grid
        var BindDataToGrid = function () {
              $http.post('/DocScanningModule/DocDestroyByPolicy/GetDocumentsByPolicy',
              {
                  _DestroyPolicyID: $scope.model.DestroyPolicy
              })
              .success(function (response) {
                  $scope.docPropIdentityGridData = response.Totalresult;
                  $scope.GridDisplayCollection = response.Totalresult;
                  $scope.model.DocumentNature = response.DocumentNature;
              }).error(function () {
                  $scope.loading = false;
              });
        }

        //$scope.selection=[];
        //// toggle selection for a given employee by name
        //$scope.toggleSelection = function(id) {
        //    var idx = $scope.selection.indexOf(id);
        //    if (idx > -1) {
        //        $scope.selection.splice(idx, 1);
        //    }
        //    else {
        //        $scope.selection.push(id);
        //    }
        //}
        //$scope.selectAll = function() {
        //    angular.forEach($scope.GridDisplayCollection, function (item) {
        //        $scope.selection.push(item.DocumentID);
        //    });
        //}
        //$scope.deselectAll = function() {
        //    $scope.selection = [];
        //}

        //$scope.save = function () {
        //     $http.post('/DocScanningModule/DocDestroyByPolicy/SaveImportantDocuments',
        //     {
        //         Documents: $scope.selection.join(','),
        //         _DestroyPolicyID: $scope.model.DestroyPolicy
        //     })
        //     .success(function (response) {
        //         toastr.success(response.Message);
        //         $scope.selection = [];
        //         BindDataToGrid();
        //     }).error(function () {
        //         $scope.loading = false;
        //     });
        //}

        $scope.SelectAll = function () {
            angular.forEach($scope.docPropIdentityGridData, function (item) {
                item.IsChecked = true;
            });
        };

        $scope.UnSelectAll = function () {
            angular.forEach($scope.docPropIdentityGridData, function (item) {
                item.IsChecked = false;
            });
        };

        $scope.Save = function (rows, e)
        {
            if (rows.length > 0) {
                var docs = [];
                var doc;
                rows.forEach(function (index) {
                    if (index.IsChecked) {
                        doc = {};
                        doc.DocumentID = index.DocumentID,
                        doc.ServerIP = index.ServerIP,
                        doc.ServerPort = index.ServerPort,
                        doc.FtpUserName=index.FtpUserName,
                        doc.FtpPassword=index.FtpPassword,
                        doc.VersionNo=index.VersionNo,
                        doc.FileServerURL=index.FileServerURL
                        docs.push(doc);
                    }
                });

                if (docs.length > 0)
                {
                    $http.post('/DocScanningModule/DocDestroyByPolicy/SaveImportantDocuments',
                    {
                        Documents: docs,
                        _DestroyPolicyID: $scope.model.DestroyPolicy
                    })
                    .success(function (response) {
                        toastr.success(response.Message);
                        $scope.docPropIdentityGridData = "";
                        $scope.GridDisplayCollection = "";

                        BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
                }
                else {
                    toastr.error("No Docs!!! Plz select atleast one docs.");
                }
            }
        }

        $scope.DeleteAll = function (rows, e) {
            if (rows.length > 0) {
                var docsDelete = [];
                var doc;
                rows.forEach(function (index) {
                    if (index.IsChecked) {
                        doc = {};
                        doc.DocumentID = index.DocumentID,
                        doc.ServerIP = index.ServerIP,
                        doc.ServerPort = index.ServerPort,
                        doc.FtpUserName = index.FtpUserName,
                        doc.FtpPassword = index.FtpPassword,
                        doc.VersionNo = index.VersionNo,
                        doc.FileServerURL = index.FileServerURL
                        docsDelete.push(doc);
                    }
                });

                if (docsDelete.length > 0) {
                    $http.post('/DocScanningModule/DocDestroyByPolicy/DeleteDocuments',
                    {
                        Documents: docsDelete,
                        _DestroyPolicyID: $scope.model.DestroyPolicy,
                        _DocumentNature: $scope.model.DocumentNature
                    })
                    .success(function (response) {
                        toastr.success(response.Message);
                        $scope.docPropIdentityGridData = "";
                        $scope.GridDisplayCollection = "";
                        BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
                }
                else {
                    toastr.error("No Docs!!! Plz select atleast one docs.");
                }


            }

           
        }
        //Declare all the $scope Array
        $scope.ownerLevels = [];
        $scope.ownersForSpecificOwnerLevel = [];
        $scope.docCategoriesForSpecificOwner = [];
        $scope.docTypeForSpecificDocCategory = [];
        $scope.docPropertyForSpecificDocType = [];
        $scope.Policies = [];
    }]);

</script>

