@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<style>
    #filedrag {
        /*display: none;*/
        font-weight: bold;
        text-align: center;
        padding: 1em 0;
        margin: 1em 0;
        color: #555;
        border: 2px dashed #555;
        border-radius: 7px;
        cursor: default;
    }

        #filedrag.hover {
            color: #f00;
            border-color: #f00;
            border-style: solid;
            box-shadow: inset 0 3px 4px;
        }

    #filedragGl {
        /*display: none;*/
        font-weight: bold;
        text-align: center;
        padding: 1em 0;
        margin: 1em 0;
        color: #555;
        border: 2px dashed #555;
        border-radius: 7px;
        cursor: default;
    }

        #filedragGl.hover {
            color: #f00;
            border-color: #f00;
            border-style: solid;
            box-shadow: inset 0 3px 4px;
        }
</style>

<script>
    $(document).ready(function () {
        //UploadFile.AddEventListenerForDragAndDrop();
        UploadFile.AddEventListenerForFileSelect();
    });

    function UploadFile() { }

    // file drag hover
    UploadFile.FileDragHover = function (e) {
        e.stopPropagation();
        e.preventDefault();
        e.target.className = (e.type == "dragover" ? "hover" : "");
    }

    // file selection
    UploadFile.FileSelectHandler = function (e) {
        // cancel event and hover styling
        UploadFile.FileDragHover(e);

        //if from drag and drop then reset file select
        if (e.dataTransfer != undefined &&
            e.dataTransfer.files != undefined) {
            UploadFile.ResetFileSelect();
        }

        // fetch FileList object
        var files = e.target.files || e.dataTransfer.files;

        if (files != undefined && files.length > 0) {
            UploadFile.UploadFileToServer(files[0], 'TR');
        }
    }


    UploadFile.AddEventListenerForDragAndDrop = function () {
        var fileDrag = $("#filedrag");
        if (window.File && window.FileList && window.FileReader) {
            var xhr = new XMLHttpRequest();
            if (xhr.upload) {
                fileDrag[0].ondragstart = UploadFile.FileDragHover;
                fileDrag[0].ondragenter = UploadFile.FileDragHover;
                fileDrag[0].ondragover = UploadFile.FileDragHover;
                fileDrag[0].ondragleave = UploadFile.FileDragHover;
                fileDrag[0].ondrop = UploadFile.FileSelectHandler;
            }
        }
        else {
            fileDrag.innerHTML = '<p>File Drag and Drop not Supported </p>';
        }

    }

    UploadFile.AddEventListenerForFileSelect = function () {
        var fileselect = $("#fileselect");
        fileselect[0].addEventListener("change", UploadFile.FileSelectHandler, false);
    }

    UploadFile.ResetFileSelect = function () {
        $("#fileselect").replaceWith('<input type="file" id="fileselect" name="fileselect[]" class="form-control" />');
        UploadFile.AddEventListenerForFileSelect();
    }

    //--------- Upload Functions ------- //
    UploadFile.UploadFileToServer = function (file, type) {
        var formdata = new FormData();
        formdata.append(file.name, file);
        formdata.append("ExelType", type);
        $.ajax({
            url: '/DocScanningModule/MossDocumentPrint/UploadHandler',
            type: 'POST',
            data: formdata,
            contentType: false,
            processData: false,
            async: true,
            success: function (data) {
                //alert(data);
                if (data.Code !== "1") {
                    $("#fileName").text(data.FileName);
                    $("#filehidden").val(data.TrackingCount);
                    window.AttributeValueCount = data.AttributeValueCount;

                }
                else {
                    toastr.info("N.B: Please input valid excel file.");
                    $("#fileName").text("");
                }

            },
            error: function (error) {
                toastr.error('Invalid Data stracture');
            }
        });
    }
</script>



<div class="box box-primary box-body" ng-controller="MassDocCtrl">

    <div class="box-header with-border">
        <div class="row">
            <div class="col-lg-6">
                <i class="fa  fa-table"></i>
                <h3 class="box-title">Mass Document Download</h3>

            </div>
            <div class="col-lg-6">
                <table class="pull-right">
                    <tr>
                        <td>
                            <div class="input-group">
                                <span class="input-group-btn">
                                    @*<button type="button" name="search" id="search-btn" class="btn btn-flat" ng-click="search()"><i class="fa fa-search"></i> Search </button>*@
                                </span>
                            </div>
                        </td>
                        <td>
                            <div class="input-group">
                                <button ng-disabled="saveIsReadOnly" type="submit" id="btnSubmit" name="ReportType" ng-click="Marge()" ng-disabled="loading" class="btn btn-flat btn-info pull-right">
                                    <i class="fa fa-copy"></i> Merge Doc
                                </button>
                            </div>
                        </td>
                        <td>
                            <div class="input-group">
                                <a id="anchor" class="btn btn-flat btn-success pull-right" ng-hide="DWReadOnly" target="_blank" href="@Url.Action("GetPdf", "OriginalDocSearching")">Download</a>
                            </div>
                        </td>
                        <td>
                            <div class="box-tools ">
                                <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-default btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>

    </div>

    <div class="box-body">


        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                            ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels
                        track by ownerLevel.OwnerLevelID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.Owner"
                            data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID"
                            data-ng-disabled="!docPropIdentityModel.OwnerLevel">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">

                    <select ui-select2="{ allowClear: true}" id="select-option" ng-model="docPropIdentityModel.DocCat" data-placeholder="Document Category" style="width:100%;" class="form-control">
                        <option value=""></option>
                        <option ng-repeat="item in DocCatForOwner" value="{{item.DocCategoryID}}">{{item.DocCategoryName}}</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Type</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">

                    <select ui-select2="{ allowClear: true}" id="select-option" ng-model="docPropIdentityModel.DocType" data-placeholder="Document Type" style="width:100%; height:32px">
                        <option value=""></option>
                        <option ng-repeat="item in DocTypeForOwner" value="{{item.DocTypeID}}">{{item.DocTypeName}}</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Documents</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select class="form-control" data-ng-model="docPropIdentityModel.DocProperty"
                        data-ng-options="docProperty as docProperty.DocPropertyName for docProperty in
                         docPropertyForSpecificDocType track by docProperty.DocPropertyID"
                        data-ng-disabled="!docPropIdentityModel.DocType">
                    <option value="">--Select--</option>
                </select>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <label>Search By</label>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select data-ng-model="docPropIdentityModel.SearchBy" class="form-control" ng-init="docPropIdentityModel.SearchBy='1'">
                    <option value="1" selected>Required Attribute</option>
                    <option value="0">Optional Attribute</option>
                </select>

            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Attribute Value</label>
                </div>
            </div>
            <div class="col-lg-4" style="font-size:smaller">
                <form id="uploadform" class="form-horizontal" role="form" onsubmit="return false;">
                    <fieldset>
                        <div class="form-group">
                            <div class="col-sm-10">
                                <input type="file" id="fileselect" style="margin-top: 10px;" name="fileselect[]" class="form-control" />
                                <input type="hidden" id="filehidden" style="margin-top: 10px;" class="form-control" />
                            </div>
                            <div class="col-sm-6">
                                <div id="" style="margin-top: 10px;"> <span id="" style="font-style: italic; font-weight:bold;">Excel Title : AttributeValue</span></div>
                            </div>
                        </div>
                    </fieldset>
                </form>
            </div>
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <button type="button" name="search" id="search-btn" class="btn btn-flat btn-primary" ng-click="search()"><i class="fa fa-search"></i> Search </button>
            </div>
        </div>
        <br />

    
        <div class="row">
            <div class="table-responsive">
                <h5 class="pull-right" style="padding-right:3px;margin-top:0px;margin-bottom:3px">Showing {{pagingInfo.totalItems==0 ? 0 : ((pagingInfo.page -1) * pagingInfo.itemsPerPage)+1}}-{{(((pagingInfo.page -1) * pagingInfo.itemsPerPage)+pagingInfo.itemsPerPage) >= pagingInfo.totalItems ? pagingInfo.totalItems : (((pagingInfo.page -1) * pagingInfo.itemsPerPage)+pagingInfo.itemsPerPage)}} of {{pagingInfo.totalItems}} results</h5>
                <table class="table table-condensed table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Document Name</th>
                            <th>Identificaiton Attribute</th>
                            <th>Attribute Value</th>
                            <th class="hidden">FileServerURL</th>
                            <th>Action</th>
                        </tr>
                        <tr>
                            <th colspan="2">
                                <input placeholder="Attribute Name" class="input-sm form-control" ng-model="AttrName" type="text" />
                            </th>
                            <th>
                                <input placeholder="Attribute Value" class="input-sm form-control" ng-model="AttrValue" type="text" />
                            </th>
                            <th>
                                <button type="button" class="btn btn-primary" ng-click="search()" ng-disabled="AttrName=='' || AttrValue==''">Search</button>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat="row in GridDisplayCollection">
                            <td class="hidden">{{row.DocumentID}}</td>
                            <td class="hidden">{{row.DocDistributionID}}</td>
                            <td class="col-lg-2">{{row.DocPropertyName}}</td>
                            <td class="col-lg-3">{{row.DocPropIdentifyName}}</td>
                            <td class="col-lg-3">{{row.MetaValue}}</td>
                            <td class="hidden">{{row.FileServerURL}}</td>
                            <td class="col-lg-4">
                                <button type="button" ng-if="row.FileExtenstion==null || row.FileExtenstion=='' || row.FileExtenstion=='pdf'" class="btn btn-xs btn-info btn-flat" data-ng-click="LoadImage(row)" style="display: inline-block;"><i class="fa fa-search-plus"></i> Quick View</button>
                                <button type="button" ng-if="row.FileExtenstion==null || row.FileExtenstion=='' || row.FileExtenstion=='pdf'" class="btn btn-xs btn-success btn-flat" data-ng-click="ShowDetailView(row)" style="display: inline-block;"><i class="fa fa-list"></i> Detail View</button>
                                <a class="btn btn-xs btn-warning btn-flat btnDownload" style="display: inline-block;" href="/Download/DownloadDocument?serverIP={{row.ServerIP}}&ftpPort={{row.ServerPort}}&ftpUserName={{row.FtpUserName}}&ftpPassword={{row.FtpPassword}}&serverURL={{row.FileServerURL}}&documentID={{row.DocumentID}}&Ext={{row.FileExtenstion}}">Download</a>
                                <button type="button" class="btn btn-xs btn-primary btn-flat btnEdit" data-ng-click="toggleEdit(row)" style="display: inline-block;"><i class="fa fa-edit"></i> Edit</button>
                                @*<button type="button" class="btn btn-xs btn-danger btn-flat btnEdit" data-ng-click="ShowDeleteConfirmModal(row)" style="display: inline-block;"><i class="fa fa-edit"></i> Delete</button>*@
                                <a class="btn btn-xs btn-danger btn-flat btnRemove" ng-click="ShowDeleteConfirmModal(row)">
                                    <i class="fa fa-remove"></i> Remove
                                </a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div ng-if="pagingInfo.totalItems > 0" class="text-center">
                    <ul uib-pagination total-items="pagingInfo.totalItems" ng-model="pagingInfo.page" items-per-page="pagingInfo.itemsPerPage" max-size="7" boundary-links="true" rotate="true" force-ellipses="true" ng-change="selectPage()"></ul>
                </div>
                <div ng-if="pagingInfo.totalItems <= 0" class="text-center">
                    NO ITEM
                </div>

            </div>
        </div>
    </div>

    <form name="myForm" ng-submit="">
        <div class="bs-example">
            <!-- Modal HTML -->
            <div id="addModal" class="modal fade">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                            <h3 class="modal-title">Change Attribute Value</h3>
                        </div>
                        <div class="modal-body">
                            <div class="box-body">
                                <div class="row">

                                    <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
                                        <div class="form-group">
                                            <label for="{{item.DocMetaID}}" class="control-label">{{item.DocPropIdentifyName}}</label>
                                            <input type="text" name="{{item.DocMetaID}}" id="{{item.DocMetaID}}" ng-model="item.MetaValue" ng-required="true" class="form-control" />
                                            <span class="label label-danger" ng-show="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">{{item.DocPropIdentifyName}} is Required.</span>
                                            <span ng-hide="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">&nbsp;</span>
                                        </div>

                                    </div>
                                    <br />

                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    <button type="button" data-ng-click="Save()" class="btn btn-primary btn-flat" ng-disabled="myForm.$invalid || loading">Save</button>
                                    <button type="button" class="btn btn-default btn-flat" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div class="bs-example">
        <!-- Modal HTML -->
        <div id="DetailViewModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                        <h4 class="modal-title">Document Detail View</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-sm-6 col-md-6 col-lg-6">
                                <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
                                    <div class="form-group">
                                        <label for="{{item.DocMetaID}}" class="control-label">{{item.DocPropIdentifyName}} Remarks</label>
                                        <input type="text" name="{{item.DocMetaID}}" id="{{item.DocMetaID}}" ng-model="item.Remarks" ng-required="true" class="form-control" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-2">
                                <h4><label>Thumbnail:</label></h4>
                            </div>
                            <div class="col-lg-10">
                                <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                                <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>
                                <button class="btn btn-flat btn-sm btn-default" data-ng-click="RotateRight()"> Rotate</button>
                                <button class="btn btn-flat btn-sm btn-default btnPrint" data-ng-click="DetailPrint()"> Print</button>
                            </div>

                        </div>
                        <div class="row">
                            <input type="hidden" id="serverIp" class="form-control" />
                            <input type="hidden" id="FtpUserName" class="form-control" />
                            <input type="hidden" id="FtpPassword" class="form-control" />
                            <input type="hidden" id="FileServerURL" class="form-control" />
                            <input type="hidden" id="IsObsolutable" class="form-control" />
                            <input type="hidden" id="DocumentID" class="form-control" />
                            <input type="hidden" id="ServerPort" class="form-control" />
                        </div>
                        <div class="row">
                            <div class="col-lg-2">
                                <div id="dwtVerticalThumbnil" class="box-body"></div>
                            </div>
                            <div class="col-lg-10">
                                <div id="dwtLargeViewer" class="box-body"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div id="QuickViewModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                        <h4 class="modal-title">Document Quick View</h4>
                    </div>
                    <div class="modal-body">
                        <a class="btn btnc2 btn-app btn-flat btnPrint" ng-click="Print()">
                            <i class="fa fa-print"></i> Print
                        </a>
                        <div class="row">
                            <div class="col-sm-6 col-md-6 col-lg-6">
                                <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
                                    <div class="form-group">
                                        <label for="{{item.DocMetaID}}" class="control-label">{{item.DocPropIdentifyName}} Remarks</label>
                                        <input type="text" name="{{item.DocMetaID}}" id="{{item.DocMetaID}}" ng-model="item.Remarks" ng-required="true" class="form-control" />
                                    </div>
                                </div>
                                <input type="hidden" id="serverIp" class="form-control" />
                                <input type="hidden" id="FtpUserName" class="form-control" />
                                <input type="hidden" id="FtpPassword" class="form-control" />
                                <input type="hidden" id="FileServerURL" class="form-control" />
                                <input type="hidden" id="IsObsolutable" class="form-control" />
                                <input type="hidden" id="DocumentID" class="form-control" />
                                <input type="hidden" id="ServerPort" class="form-control" />
                            </div>
                        </div>
                        <div id="dwtQuickViewer" class="box-body"></div>
                    </div>
                    <div class="modal-footer">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div id="QuickViewModal2" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                        <h4 class="modal-title">Document Quick View</h4>
                    </div>
                    <div class="modal-body">
                        @*<a class="btn btnc2 btn-app btn-flat btnPrint" ng-click="Print()">
                                <i class="fa fa-print"></i> Print
                            </a>*@

                        <div id="dwtQuickViewer2" class="box-body"></div>
                    </div>
                    <div class="modal-footer">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>

    <div id="mydiv" data-ng-show="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" /> <span class="text-bold">Loading...</span>
            </div>
        </div>
    </div>

    <div id="ConfirmDelete" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Are You Sure?</h4>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <input type="hidden" ng-model="DocumentIDForDelete" />
                            <h4>You Want to Delete the Document?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="yes" class="btn btn-danger" ng-disabled="loading" data-ng-click="DeleteDocument()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>
<script type="text/javascript" src="~/Resources/addon/dynamsoft.webtwain.addon.pdf.js"></script>

<script type="text/javascript">

    app.controller('MassDocCtrl', function ($scope, $http) {
        applySecurity();
        $scope.docPropIdentityModel = {
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            SearchBy: '1',
            SearchFor: "",
            DocCat: '',
            DocType: '',
            Status: ""
        };
        $scope.DWReadOnly = true;
        $scope.pagingInfo = {
            page: 1,
            itemsPerPage: 20,
            sortBy: null,
            reverse: false,
            search: null,
            totalItems: 0
        };


        $scope.search = function () {
            $scope.pagingInfo.page = 1;
            $scope.BindDataToGrid();
        };

        $scope.AttrName = '';
        $scope.AttrValue = '';


        $scope.sort = function (sortBy) {
            if (sortBy === $scope.pagingInfo.sortBy) {
                $scope.pagingInfo.reverse = !$scope.pagingInfo.reverse;
            } else {
                $scope.pagingInfo.sortBy = sortBy;
                $scope.pagingInfo.reverse = false;
            }
            $scope.pagingInfo.page = 1;
            $scope.BindDataToGrid();
        };

        $scope.selectPage = function () {
            $scope.BindDataToGrid();
        };


        $scope.ShowDeleteConfirmModal = function (row) {
            $scope.DocumentIDForDelete = row.DocumentID;
            $scope.DocDistributionIDForDelete = row.DocDistributionID;
            $('#ConfirmDelete').modal('show');
        };

        $scope.DeleteDocument = function () {
            $scope.loading = true;
            $http.post('/DocScanningModule/OriginalDocSearching/DeleteDocument',
            {
                _DocumentID: $scope.DocumentIDForDelete,
                _DocDistributionID: $scope.DocDistributionIDForDelete,
                _DocumentType: "Original"
            })
            .success(function (response) {
                $('#ConfirmDelete').modal('hide');
                $scope.BindDataToGrid();
                $scope.loading = false;
                toastr.success("Delete Successful");
            }).error(function (error) {
                $scope.loading = false;
                toastr.error("Delete Failed");
            });
        };


        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        var DWObjectQuickViewer;

        var DWObjectQuickViewer2;
        var zoomFactor = .5;



        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtVerticalThumbnil');
            DWObjectQuickViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtQuickViewer');

            DWObjectQuickViewer2 = Dynamsoft.WebTwainEnv.GetWebTwain('dwtQuickViewer2');
            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectQuickViewer.SetViewMode(1, 1);
            DWObjectQuickViewer2.SetViewMode(1, 1);

            DWObjectQuickViewer.Width = 9.69 * 100;
            DWObjectQuickViewer.Height = 10.69 * 70;
             
            DWObjectQuickViewer2.Width = 9.69 * 100;
            DWObjectQuickViewer2.Height = 10.69 * 70;

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;
            DWObjectLargeViewer.Width = 9.69 * 90;

            DWObject.SetViewMode(-1, 4);
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;

            DWObject.RegisterEvent('OnMouseClick', $scope.updateLargeViewer);


            //DWObject.Addon.PDF.Download("../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
            //    function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
            //    function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            //);

            //DWObject.Addon.PDF.SetResolution(200);
            //DWObject.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            //DWObject.IfShowFileDialog = true;

            //DWObject.RemoveAllImages();
            //DWObjectQuickViewer.RemoveAllImages();
            //DWObjectLargeViewer.RemoveAllImages();
        };

        $scope.ResetImageViewrs = function () {
            DWObjectQuickViewer.RemoveAllImages();
            DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();

            DWObjectQuickViewer2.RemoveAllImages();
        }

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };

        $scope.RotateRight = function () {
            DWObjectLargeViewer.RotateRight(DWObjectLargeViewer.GetSelectedImageIndex(0));
        }

        $scope.LoadImage = function (tableRow, e) {
            //DWObject.Addon.PDF.Download("../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
            //    function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
            //    function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            //);

            //DWObject.Addon.PDF.SetResolution(200);
            //DWObject.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            //DWObject.IfShowFileDialog = true;

            //DWObject.RemoveAllImages();
            //DWObjectQuickViewer.RemoveAllImages();


            // For Remarks
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSpecificDocType',
            {
                _DocumentID: tableRow.DocumentID,
                _DocDistributionID: tableRow.DocDistributionID
            })
            .success(function (response) {
                $scope.DocumentsAttributeList = response;
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });
            //

            applySecurity();

            DWObjectQuickViewer.Addon.PDF.Download("../Resources/addon/Pdf.zip",   // specify the url of the add-on resource
                function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
                function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            );
            DWObjectQuickViewer.IfShowFileDialog = false;
            DWObjectQuickViewer.RemoveAllImages();
            DWObjectQuickViewer.Addon.PDF.SetResolution(200);
            DWObjectQuickViewer.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            DWObjectQuickViewer.HTTPDownloadEx(location.host, "DocScanningModule/MultiDocScan/GetFilePassWord_r?" + encodeURIComponent("serverIP") + "=" + encodeURIComponent(tableRow.ServerIP)
               + "&" + encodeURIComponent("ftpPort") + "=" + encodeURIComponent(tableRow.ServerPort)
               + "&" + encodeURIComponent("ftpUserName") + "=" + encodeURIComponent(tableRow.FtpUserName)
               + "&" + encodeURIComponent("ftpPassword") + "=" + encodeURIComponent(tableRow.FtpPassword)
               + "&" + encodeURIComponent("serverURL") + "=" + encodeURIComponent(tableRow.FileServerURL)
               + "&" + encodeURIComponent("documentID") + "=" + encodeURIComponent(tableRow.DocumentID)
               + "&" + encodeURIComponent("isObsolete") + "=" + encodeURIComponent(tableRow.IsObsolutable)
               + "&" + encodeURIComponent("isSecured") + "=" + encodeURIComponent(tableRow.IsSecured), 4, function () {
                   $('#QuickViewModal').modal('show');
                   $('#serverIp').val(tableRow.ServerIP);
                   $('#ServerPort').val(tableRow.ServerPort);
                   $('#FtpUserName').val(tableRow.FtpUserName);
                   $('#FtpPassword').val(tableRow.FtpPassword);
                   $('#FileServerURL').val(tableRow.FileServerURL);
                   $('#DocumentID').val(tableRow.DocumentID);
                   $('#IsObsolutable').val(tableRow.IsObsolutable);
               }, function () {
                   toastr.error('File Not Found');
               });
        };



        $scope.Print = function () {
            applySecurity();
            DWObjectQuickViewer2.Addon.PDF.Download(
                "../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
                function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
                function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            );
            var ServerIP = $('#serverIp').val();
            var ServerPort = $('#ServerPort').val();
            var FtpUserName = $('#FtpUserName').val();
            var FtpPassword = $('#FtpPassword').val();
            var FileServerURL = $('#FileServerURL').val();
            var DocumentID = $('#DocumentID').val();
            var IsObsolutable = $('#IsObsolutable').val();
            var IsSecured = "";

            DWObjectQuickViewer2.IfShowFileDialog = false;
            DWObjectQuickViewer2.RemoveAllImages();
            DWObjectQuickViewer2.Addon.PDF.SetResolution(200);
            DWObjectQuickViewer2.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            DWObjectQuickViewer2.HTTPDownloadEx(location.host, "DocScanningModule/MultiDocScan/GetInformationCopy?" + encodeURIComponent("serverIP") + "=" + encodeURIComponent(ServerIP)
               + "&" + encodeURIComponent("ftpPort") + "=" + encodeURIComponent(ServerPort)
               + "&" + encodeURIComponent("ftpUserName") + "=" + encodeURIComponent(FtpUserName)
               + "&" + encodeURIComponent("ftpPassword") + "=" + encodeURIComponent(FtpPassword)
               + "&" + encodeURIComponent("serverURL") + "=" + encodeURIComponent(FileServerURL)
               + "&" + encodeURIComponent("documentID") + "=" + encodeURIComponent(DocumentID)
               + "&" + encodeURIComponent("isObsolete") + "=" + encodeURIComponent(IsObsolutable)
               + "&" + encodeURIComponent("isSecured") + "=" + encodeURIComponent(true), 4, function () {
                   //$('#QuickViewModal2').modal('show');
                   $scope.Print2();
               }, function () {
                   toastr.error('File Not Found');
               });


        };

        $scope.Print2 = function () {
            DWObjectQuickViewer2.Print();
        }

        $scope.DetailPrint = function () {
            $scope.Print();
        };


        $scope.ShowDetailView = function (tableRow, e) {
            DWObject.Addon.PDF.Download("../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
               function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
               function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
           );

            DWObject.Addon.PDF.SetResolution(200);
            DWObject.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            DWObject.IfShowFileDialog = true;
            DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();


            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSpecificDocType',
            {
                _DocumentID: tableRow.DocumentID,
                _DocDistributionID: tableRow.DocDistributionID
            })
            .success(function (response) {
                $scope.DocumentsAttributeList = response;
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });


            //applySecurity();
            //DWObject.Addon.PDF.Download(
            //    location.host + "/Resources/addon/Pdf.zip",  // specify the url of the add-on resource
            //    function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
            //    function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            //);

            //DWObject.IfShowFileDialog = false;
            //DWObject.RemoveAllImages();
            //DWObjectLargeViewer.RemoveAllImages();

            //DWObject.Addon.PDF.SetResolution(200);
            //DWObject.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            DWObject.HTTPDownloadEx(location.host, "DocScanningModule/MultiDocScan/GetFilePassWord_r?" + encodeURIComponent("serverIP") + "=" + encodeURIComponent(tableRow.ServerIP)
            + "&" + encodeURIComponent("ftpPort") + "=" + encodeURIComponent(tableRow.ServerPort)
            + "&" + encodeURIComponent("ftpUserName") + "=" + encodeURIComponent(tableRow.FtpUserName)
            + "&" + encodeURIComponent("ftpPassword") + "=" + encodeURIComponent(tableRow.FtpPassword)
            + "&" + encodeURIComponent("serverURL") + "=" + encodeURIComponent(tableRow.FileServerURL)
            + "&" + encodeURIComponent("documentID") + "=" + encodeURIComponent(tableRow.DocumentID)
            + "&" + encodeURIComponent("isObsolete") + "=" + encodeURIComponent(tableRow.IsObsolutable)
            + "&" + encodeURIComponent("isSecured") + "=" + encodeURIComponent(tableRow.IsSecured), 4, function () {
                $('#DetailViewModal').modal('show');
                $('#serverIp').val(tableRow.ServerIP);
                $('#ServerPort').val(tableRow.ServerPort);
                $('#FtpUserName').val(tableRow.FtpUserName);
                $('#FtpPassword').val(tableRow.FtpPassword);
                $('#FileServerURL').val(tableRow.FileServerURL);
                $('#DocumentID').val(tableRow.DocumentID);
                $('#IsObsolutable').val(tableRow.IsObsolutable);
            }, function () {
                toastr.error('File Not Found');
            });
        };


        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
        };


        $scope.DocumentIDForDelete = "";
        $scope.loading = true;


        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                //$scope.docPropIdentityModel.OwnerLevel = response.result[0];
                $scope.docPropIdentityModel.OwnerLevel = "";
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });


        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal, oldVal) {
            if (newVal) {
                if (newVal != "" && newVal != oldVal) {
                    $scope.docPropIdentityModel.Owner = "";
                    $scope.docPropIdentityModel.DocCategory = "";
                    $scope.docPropIdentityModel.DocType = "";
                    $scope.docPropIdentityModel.DocProperty = "";
                    //$scope.ResetImageViewrs();
                    $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                        { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                        .success(function (response) {
                            $scope.ownersForSpecificOwnerLevel = response.result;
                            //$scope.docPropIdentityModel.Owner = response.result[0];
                            $scope.loading = false;
                        }).error(function () {
                            $scope.loading = false;
                        });
                }
            }
        });




        $scope.DocCatForOwner = [];
        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                //$scope.ResetImageViewrs();
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.DocCatForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.DocTypeForOwner = [];
        $scope.$watch('docPropIdentityModel.DocCat', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.ResetImageViewrs();
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.DocTypeForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocType', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.ResetImageViewrs();

                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocType
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocProperty', function (newVal, oldVal) {
            if (newVal) {
                //$scope.BindDataToGrid();
                $scope.ResetImageViewrs();
            }
        });

        $scope.$watch('docPropIdentityModel.SearchBy', function (newVal, oldVal) {
            if (newVal) {
                if (newVal != oldVal) {
                    //$scope.BindDataToGrid();
                    $scope.ResetImageViewrs();
                }

            }
        });

        $scope.BindDataToGrid = function () {
            $scope.loading = true;
            $http.post('/DocScanningModule/MossDocumentPrint/GetOriginalDocBySearchFromList',
            {
                _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                _DocTypeID: $scope.docPropIdentityModel.DocType,
                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
                _SearchBy: $scope.docPropIdentityModel.SearchBy,
                page: $scope.pagingInfo.page,
                itemsPerPage: $scope.pagingInfo.itemsPerPage,
                sortBy: $scope.pagingInfo.itemsPerPage,
                reverse: $scope.pagingInfo.reverse,
                attribute: $scope.AttrName,
                search: $scope.AttrName == '' ? $scope.pagingInfo.search : $scope.AttrValue
            })
            .success(function (pageable) {
                if (pageable.respStatus == null) {

                    $scope.GridDisplayCollection = pageable.docList;
                    $scope.pagingInfo.totalItems = pageable.totalPages;
                    $scope.loading = false;
                }
                else {
                    $scope.GridDisplayCollection = pageable.docList;
                    $scope.pagingInfo.totalItems = pageable.totalPages;
                    toastr.error(pageable.respStatus.Message);
                    $scope.loading = false;
                }

                applySecurity();
            }).error(function () {
                $scope.loading = false;
            });

        };

        $scope.toggleEdit = function (tableRow) {
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSpecificDocType',
            {
                _DocumentID: tableRow.DocumentID,
                _DocDistributionID: tableRow.DocDistributionID
            })
                .success(function (response) {
                    $scope.DocumentsAttributeList = response;
                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });

            $('#addModal').modal('show');
        };


        var DocMetaValues = {
            MetaValue: "",
            DocMetaID: ""
        };

        var FinalObject = { "DocMetaValues": [] };


        $scope.Save = function () {
            $scope.loading = true;

            angular.forEach($scope.DocumentsAttributeList, function (item) {

                DocMetaValues.DocMetaID = item.DocMetaID;
                DocMetaValues.MetaValue = item.MetaValue;

                FinalObject.DocMetaValues.push(DocMetaValues);

                DocMetaValues = {
                    MetaValue: "",
                    DocMetaID: ""
                };

            });

            $.ajax({
                url: '/DocScanningModule/OriginalDocSearching/UpdateDocMetaInfo',
                data: JSON.stringify(FinalObject),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                //async: false,
                success: function (response) {
                    $scope.loading = false;
                    $('#addModal').modal('hide');
                    $scope.BindDataToGrid();
                    toastr.success(response.Message);
                },
                error: function (response) {
                    $scope.loading = false;
                    toastr.error(response.Message);
                }
            });

            FinalObject = { "DocMetaValues": [] };
        }

        $scope.toggleRefreshTable = function (row) {
            location.reload();
        };


        var MetaValues = {
            MetaValue: ""
        };

        var FinalObj = { "MetaValues": [] };

        $scope.Marge = function () {
            $scope.DWReadOnly = true;
            $scope.loading = true;

            angular.forEach($scope.GridDisplayCollection, function (item) {

                MetaValue = item.DocumentID;

                FinalObj.MetaValues.push(MetaValue);

            });

            var Docs = FinalObj.MetaValues.join();

            $http.post('/DocScanningModule/MossDocumentPrint/Marge',
                            {
                                _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                                _DocTypeID: $scope.docPropIdentityModel.DocType,
                                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
                                _SearchBy: $scope.docPropIdentityModel.SearchBy,
                                page: $scope.pagingInfo.page,
                                itemsPerPage: $scope.pagingInfo.itemsPerPage,
                                sortBy: $scope.pagingInfo.itemsPerPage,
                                reverse: $scope.pagingInfo.reverse,
                                attribute: $scope.AttrName,
                                Docs: Docs,
                                search: $scope.AttrName == '' ? $scope.pagingInfo.search : $scope.AttrValue
                            })
                            .success(function (response) {

                                $scope.showPrint = false;
                                $scope.loading = false;
                                if (response.Message == "Document Merge Successfully") {
                                    $scope.DWReadOnly = false;
                                    toastr.success(response.Message);
                                }
                                else if (response.Message == "Document Not Found") {
                                    $scope.DWReadOnly = true;
                                    toastr.error(response.Message);
                                }
                                else {
                                    $scope.DWReadOnly = true;
                                    toastr.error(response.Message);
                                }
                                //toggleRefreshTable();
                            })
                               .error(function (response) {
                                   $scope.loading = false;
                                   $scope.DWReadOnly = true;
                                   e.PreverntDefault();
                                   toastr.error("Document Merge Failed.");
                               });
        }


    });
</script>

