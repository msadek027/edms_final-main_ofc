@{
   ViewBag.Title = "Index";
   Layout = "~/Views/Shared/_AdminLteLayout.cshtml"; 
}

<style type="text/css">
    .content {
        padding-top: 0px;
    }
</style>

<div ng-controller="ProcessingStageCtrl">
    <div style="padding-bottom:5px;padding-top:5px;" class="row">
        <div class="col-sm-4 text-left">
            <span class="label label-success" style="font-size:1em">{{stageName}}</span>
        </div>
        <div class="col-sm-8 text-right" style="padding-right:15px">
            <span class="label label-danger" style="font-size:.9em">{{OwnerLevelName}}</span>
            <i class="fa fa-arrow-circle-right"></i>
            <span class="label label-danger" style="font-size:.9em">{{OwnerName}}</span>
            <i class="fa fa-arrow-circle-right"></i>
            <span class="label label-danger" style="font-size:.9em">{{DocCategoryName}}</span>
            <i class="fa fa-arrow-circle-right"></i>
            <span class="label label-danger" style="font-size:.9em">{{DocTypeName}}</span>
        </div>
    </div>
    <div class="box box-primary box-body" ng-if="isUserMaker || isUserChecker"> 
        <div class="box-header" style="padding-bottom: 0px; padding-top:0px">
            <i class="fa fa-table"></i>
            <h4 class="box-title">Manage Document</h4>
        </div>
        <div class="box-body">
            <div ng-bind-html="tableData" style="overflow-y:scroll;" compile-template></div>
            <div ng-if="pagingInfo.totalItems > 0 " class="text-center">
                <ul uib-pagination total-items="pagingInfo.totalItems" ng-model="pagingInfo.page" items-per-page="pagingInfo.itemsPerPage" max-size="7" boundary-links="true" rotate="true" force-ellipses="true" ng-change="selectPage()"></ul>
            </div>
        </div>
    </div>
    <div class="box box-primary box-body" ng-if="isFirstStage && hasMake && isUserMaker">

        <div class="box-header" style="padding-bottom: 0px; padding-top:0px">
            <i class="fa  fa-table"></i>
            <h4 class="box-title">Generate Document</h4>
        </div>
        <div class="box-body">
            <form name="AddPropType" novalidate>
                <div class="row">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <div class="box box-success" ng-if="docGenerationModelCollection.propsForSpecificDocType.length > 0">
                       
                            <div class="box-header with-border">
                                <h3 class="box-title">Fill Properties</h3>
                            </div>
                            <div class="box-body">
                                <div class="row">
                                    <div class="col-sm-6 col-md-6 col-lg-6" ng-repeat="prop in docGenerationModelCollection.propsForSpecificDocType">
                                        <div class="form-group row" style="margin-bottom: 0px;" ng-class="{'has-error' : AddPropType['f_' + $index].$invalid && AddPropType['f_' + $index].$touched}">
                                            <div class="col-sm-4 col-md-4 col-lg-4">
                                                <label for="f_{{$index}}" class="control-label">{{prop.PropertyName}}{{(prop.IsRequired && (prop.StageMapID == stageID))?'*':''}} </label>
                                            </div>
                                            <div class="col-sm-8 col-md-8 col-lg-8">
                                                <input type="{{prop.PropertyType}}" class="form-control" id="f_{{$index}}" name="f_{{$index}}" ng-model="prop.PropertyValue" ng-required="prop.IsRequired && (prop.StageMapID == stageID)" ng-disabled="prop.StageMapID != stageID" />
                                                <div style="height:20px">
                                                    <span class="help-block" style="margin-bottom: 0px;margin-top: 0px;" ng-if="AddPropType['f_' + $index].$invalid && AddPropType['f_' + $index].$touched">{{prop.PropertyName}} is invalid.</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div class="row" ng-repeat="tt in docGenerationModelCollection.listPropsForSpecificDocType track by $index" ng-init="p_index=$index">
                                    <h4 class="text-center">Add {{tt.PropertyName}}</h4>
                                    <div class="col-sm-5 col-md-5 col-lg-5" ng-repeat="item in tt.ColumnList track by $index" ng-if="tt.ColumnList[$index].FieldTitle != 'ID' && tt.ColumnList[$index].FieldTitle != 'ObjectID'">
                                        <div class="form-group row">
                                            <div class="col-sm-4 col-md-4 col-lg-4">
                                                <label for="F_{{tt.ColumnList[$index].FieldTitle}}" class="control-label">{{tt.ColumnList[$index].FieldTitle}} </label>
                                            </div>
                                            <div class="col-sm-8 col-md-8 col-lg-8" ng-if="tt.ColumnList[$index].RelationID == 0">
                                                <input class="form-control" name="F_{{tt.ColumnList[$index].FieldTitle}}" ng-model="tt.ColumnList[$index].Value" />
                                            </div>
                                            <div class="col-sm-8 col-md-8 col-lg-8" ng-if="tt.ColumnList[$index].RelationID > 0">
                                                <select ng-model="tt.ColumnList[$index].Value" class="form-control" ng-init="tt.ColumnList[$index].Value='';getMasterDg(p_index,$index,tt.ColumnList[$index].Master)">
                                                    <option value="">--Select--</option>
                                                    <option value="{{m.ID}}" ng-repeat="m in tt.ColumnList[$index].List">{{m.Name}}</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-primary" ng-click="docGenerationVM.AddNewListItem(tt,$index)">Add New</button>
                                    <button type="button" class="btn btn-primary" ng-click="docGenerationVM.RemoveListItem($index)">Remove</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-2 col-md-2 col-lg-2">
                        <div class="form-group">
                            <label>Documents</label>
                        </div>
                    </div>
                    <div class="col-sm-4 col-md-4 col-lg-4">
                        <input type="button" class="btn btn-flat btn-primary" value="Select All" ng-click="docGenerationVM.SelectAll()" />
                        <input type="button" class="btn btn-flat btn-primary" value="Unselect All" ng-click="docGenerationVM.UnSelectAll()" />

                        <div ng-repeat="docProperty in docGenerationModelCollection.docsForSpecificDocType">
                            <input type="checkbox" name="DocProperty" ng-model="docProperty.IsSelected" ng-init="docProperty.IsSelected=(docProperty.DocClassification=='Required' && docProperty.StageMapID == stageID)" ng-disabled="(docProperty.StageMapID != stageID || docProperty.DocClassification =='Required')" />{{docProperty.DocPropertyName}}
                        </div>
                    </div>
                </div>
            </form>
            <br />
            <div class="row">
                <div class="col-lg-12">
                    <label>Process Documents: </label>

                    <button class="btn btnc1 btn-app btn-flat btnScan" ng-click="docGenerationVM.AcquireImage();">
                        <i class="fa fa-print"></i> Scan
                    </button>
                    <a class="btn btnc2 btn-app btn-flat btnLoad" ng-click="docGenerationVM.LoadImage()">
                        <i class="fa fa-inbox"></i> Load PDF
                    </a>

                  
                    <a class="btn btnc2 btn-app btn-flat bg-blue-gradient" ng-click="docGenerationVM.LoadImageWithoutBlank()" style="position: relative;">

                        <i class="fa fa-book"></i> Load Blank PDF

                    </a>
                    <a class="btn btnc3 btn-app btn-flat btnRemove" ng-click="docGenerationVM.RemoveAllSelectedImages()">
                        <i class="fa fa-remove"></i> Remove
                    </a>
                    <a class="btn btnc2 btn-app btn-flat btnRotate" ng-click="docGenerationVM.RotateRight()">
                        <i class="fa fa-rotate-right"></i> Rotate
                    </a>
                    <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docGenerationVM.ShowMoveImageDiv()">
                        <i class="fa fa-reorder"></i> Move Image
                    </a>
                    <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docGenerationVM.ShowUploadImageDiv()">
                        <i class="fa fa-reorder"></i> Upload Other
                    </a>
                </div>
            </div>
            <br />
            <div class="row">
                <div id="MoveImage" class="row hidden">
                    <div class="col-lg-2"></div>
                    <div class="col-lg-10">
                        <label>Which Image</label><input type="text" id="WhichImage" />
                        <label>Where</label><input type="text" id="Where" />
                        <button class="btn btn-primary btn-flat btn-sm" ng-click="docGenerationVM.MoveImage()">Move</button>
                    </div>
                </div>
            </div>
            <div class="row" ng-show="ShowUploadImageDivVar">
                <div class="col-lg-2"></div>
                <div class="col-lg-10">
                    <input type="file" id="FileUpload1" multiple />
                </div>
            </div>
            <div class="row" ng-hide="ShowUploadImageDivVar">
                <div class="col-lg-12">
                    <div id="dwtHorizontalThumbnil" style="height:200px;width:100%"></div>
                </div>
            </div>
        </div>
        <div class="box-footer with-border">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <button type="button" id="btnSave" ng-disabled="AddPropType.$invalid" class="btn btn-lg btn-primary btn-flat pull-right btnSave" data-ng-click="docGenerationVM.ShowConfirmModal()"><i class="fa fa-save"></i>  Save</button>
                    <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-lg btn-default btn-flat pull-left" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
                </div>
            </div>
        </div>
    </div>
    <div id="ConfirmSave" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title">Are You Sure?</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <h4>You Want to Upload the Documents?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="yes" class="btn btn-danger" ng-disabled="loading" data-ng-click="docGenerationVM.UploadNewDocument()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>



    <div id="docMakerModal" class="modal fade">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Make Document</h3>
                </div>
                <div class="modal-body">
                    <form name="UpdateDocForm" novalidate>
                        <div class="row">
                            <div class="col-sm-6 col-md-6 col-lg-6" ng-repeat="prop in docMakeCheckModelCollection.updatePropertyCollection">
                                <div class="form-group row" style="margin-bottom: 0px;" ng-class="{'has-error' : UpdateDocForm['f_' + $index].$invalid && UpdateDocForm['f_' + $index].$touched}">
                                    <div class="col-sm-4 col-md-4 col-lg-4">
                                        <label for="f_{{$index}}">{{prop.PropertyName}}{{(prop.IsRequired && (prop.StageMapID == stageID))?'*':''}}</label>
                                    </div>
                                    <div class="col-sm-8 col-md-8 col-lg-8">
                                        <input name="f_{{$index}}" type="{{prop.StageMapID == stageID?prop.PropertyType:'text'}}" value="{{prop.PropertyValue}}" ng-model="prop.PropertyValue" class="form-control" ng-required="prop.IsRequired && (prop.StageMapID == stageID)" ng-disabled="prop.StageMapID != stageID" />
                                        <div style="height:20px">
                                            <span ng-if="UpdateDocForm['f_' + $index].$touched && UpdateDocForm['f_' + $index].$invalid" class="help-block" style="margin-bottom: 0px;margin-top: 0px;">{{prop.PropertyName}} is invalid.</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" ng-repeat="item in docMakeCheckModelCollection.listPropertyCollectionMk">
                            <div ng-bind-html="item" compile-template></div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col-sm-6 col-md-6 col-lg-6">
                                <table class="table table-condensed table-bordered table-striped table-hover pnlView">
                                    <tr>
                                        <th>Documents</th>
                                        <th>Actions</th>
                                    </tr>
                                    <tr ng-repeat="item in docMakeCheckModelCollection.updateDocumentCollection">
                                        <td>{{item.DocPropertyName}}</td>
                                        <td>
                                            <button type="button" class="btn btn-info btn-xs" ng-click="docMakeCheckVM.GetImage(item)" ng-disabled="item.StageMapID != stageID">Edit</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-sm-3 col-md-3 col-lg-3">
                                <input type="button" class="btn btn-flat btn-primary" value="Select All" ng-click="docMakeCheckModelCollection.SelectAll()" />
                                <input type="button" class="btn btn-flat btn-primary" value="Unselect All" ng-click="docMakeCheckModelCollection.UnSelectAll()" />

                                <div ng-repeat="docProperty in docMakeCheckModelCollection.newDocumentCollection">
                                    <input type="checkbox" name="DocProperty" ng-model="docProperty.IsSelected" ng-init="docProperty.IsSelected=(docProperty.DocClassification=='Required' && docProperty.StageMapID == stageID)" ng-disabled="(docProperty.StageMapID != stageID || docProperty.DocClassification =='Required')" />{{docProperty.DocPropertyName}}
                                </div>
                            </div>
                            <div ng-if="docMakeCheckModelCollection.IsBacked" class="col-sm-3 col-md-3 col-lg-3 text-left">
                                <p><b>Document is backed because:</b> {{docMakeCheckModelCollection.BackReason}}</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <label>Process Documents: </label>

                                <button class="btn btnc1 btn-app btn-flat btnScan" ng-click="docMakeCheckVM.AcquireImage_Create();">
                                    <i class="fa fa-print"></i> Scan
                                </button>
                                <a class="btn btnc2 btn-app btn-flat btnLoad" ng-click="docMakeCheckVM.LoadImage_Create()">
                                    <i class="fa fa-inbox"></i> Load PDF
                                </a>

                                <a class="btn btnc2 btn-app btn-flat bg-blue-gradient" ng-click="docMakeCheckVM.LoadImageWithoutBlank()" style="position: relative;">

                                    <i class="fa fa-book"></i> Load Blank PDF

                                </a>
                                <a class="btn btnc3 btn-app btn-flat btnRemove" ng-click="docMakeCheckVM.RemoveAllSelectedImages_Create()">
                                    <i class="fa fa-remove"></i> Remove
                                </a>
                                <a class="btn btnc2 btn-app btn-flat btnRotate" ng-click="docMakeCheckVM.RotateRight_Create()">
                                    <i class="fa fa-rotate-right"></i> Rotate
                                </a>
                                <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docMakeCheckVM.ShowMoveImageDiv_Create()">
                                    <i class="fa fa-reorder"></i> Move Image
                                </a>
                                <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docMakeCheckVM.ShowUploadImageDiv_Create()">
                                    <i class="fa fa-reorder"></i> Upload Other
                                </a>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div id="MoveImage" class="row hidden">
                                <div class="col-lg-2"></div>
                                <div class="col-lg-10">
                                    <label>Which Image</label><input type="text" id="WhichImage_Create" />
                                    <label>Where</label><input type="text" id="Where_Create" />
                                    <button class="btn btn-primary btn-flat btn-sm" ng-click="docMakeCheckVM.MoveImage_Create()">Move</button>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-12 col-lg-12" id="viewerHolder">
                                <div id="dwtHTMakeCreate" style="height:200px;"></div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">

                    <div ng-repeat="item in docMakeCheckModelCollection.ParentStages">
                        <div class="row  ">
                            <div class="col-lg-2 col-md-1 col-sm-1 col-xs-1" style="text-align:left">
                                <i class="fa fa-cog"></i>&nbsp;{{item.StageName}}
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                                <input type="checkbox" ng-model="item.IsChecked" />
                            </div>

                        </div>
                    </div>

                    <textarea class="form-control pull-left" style="width:200px;height:33px" placeholder="Add a Reason" ng-model="revertFromMake"></textarea>
                    <button class="btn btn-danger pull-left" ng-click="docMakeCheckVM.RevertFromMake(revertFromMake)" ng-disabled="isFirstStage ||!revertFromMake|| revertFromMake==''" type="button" style="margin-left:5px">Back</button>
                    <button class="btn btn-primary pull-right" ng-click="docMakeCheckVM.CreateDocument()" ng-disabled="!UpdateDocForm.$valid" type="button">Save & Make</button>
                </div>
            </div>
        </div>
    </div>
    <div id="docCheckerModal" class="modal fade">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Check Document</h3>
                </div>
                <div class="modal-body">
                    <form name="CheckDocForm" novalidate>
                        <div class="row">
                            <div ng-repeat="prop in docMakeCheckModelCollection.updatePropertyCollection">
                                <div class="col-sm-2 col-md-2 col-lg-2">
                                    <label>{{prop.PropertyName}}</label>
                                </div>
                                <div class="col-sm-4 col-md-4 col-lg-4">
                                    <input name="f_{{$index}}" type="text" ng-model="prop.PropertyValue" class="form-control" ng-disabled="true" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div ng-repeat="prop in docMakeCheckModelCollection.listPropertyCollectionCk">
                                <div ng-bind-html="prop" compile-template></div>
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <table class="table table-condensed table-bordered table-striped table-hover">
                                    <tr>
                                        <td>
                                            Index
                                        </td>

                                        <td>
                                            Document of
                                        </td>
                                        <td>
                                            Actions
                                        </td>
                                    </tr>
                                    <tr ng-repeat-start="item in docMakeCheckModelCollection.allDocumentCollection">
                                        <td>
                                            {{$index+1}}
                                        </td>
                                        <td>
                                            {{item.DocPropertyName}}
                                        </td>
                                        <td>
                                            @*<button type="button" ng-disabled="item.IsPermitted?((item.DocumentID=!'' || item.DocumentID != null)?false:true):true" class="btn btn-info btn-xs" data-toggle="collapse" data-target="#showqview_{{$index}}" ng-click="QuickViewOfCheck(item,$index)">Quick View</button>*@
                                            @*<button type="button" ng-disabled="!item.IsPermitted" class="btn btn-info btn-xs" data-toggle="collapse" data-target="#showqview_{{$index}}" ng-click="QuickViewOfCheck(item,$index)">Quick View</button>*@
                                            <button type="button" ng-disabled="!item.IsPermitted" class="btn btn-info btn-xs" ng-click="LargeViewOfCheck(item)">Large View</button>
                                            @*<button type="button" ng-disabled="(item.DocumentID='' || item.DocumentID = null ) && !item.IsPermitted" class="btn btn-info btn-xs" ng-click="LargeViewOfCheck(item)">Large View</button>*@
                                        </td>
                                    </tr>
                                    <tr style="margin-top:0px;padding-top:0px;margin-bottom:0px;padding-bottom:0px" ng-repeat-end>
                                        <td colspan="3" style="margin-top:0px;padding-top:0px;margin-bottom:0px;padding-bottom:0px">
                                            <div class="box box-success collapse" style="margin:0px;padding:0px" id="showqview_{{$index}}">
                                                <div class="box-header with-border" style="margin:0px;padding:0px">
                                                    <h3 class="box-title">Quick Viewer</h3>
                                                    <div class="box-tools pull-right">
                                                        <button class="btn btn-box-tool" ng-click="Print()"><i class="fa fa-print"></i> Print</button>
                                                    </div>
                                                </div>
                                                <div id="q_view_loader_{{$index}}" style="margin:0px;padding:0px"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                        <div ng-if="docMakeCheckModelCollection.IsBacked" class="text-left">
                            <p><b>Document is backed because:</b> {{docMakeCheckModelCollection.BackReason}}</p>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <div ng-repeat="item in docMakeCheckModelCollection.ParentStages">
                        <div class="row  ">

                            <div class="col-lg-2 col-md-1 col-sm-1 col-xs-1" style="text-align:left">
                                <i class="fa fa-cog"></i>&nbsp;{{item.StageName}}
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1">
                                <input type="checkbox" ng-model="item.IsChecked" />
                            </div>

                        </div>
                    </div>
                    <textarea class="form-control pull-left" style="width:200px;height:33px" placeholder="Add a Reason" ng-model="revertFromCheck"></textarea>
                    <button type="button" ng-click="docMakeCheckVM.RevertFromCheck(revertFromCheck)" class="btn btn-danger pull-left" ng-disabled="!revertFromCheck||revertFromCheck==''" style="margin-left:5px">Back</button>
                    <button type="button" ng-click="docMakeCheckVM.DoneChecking()" class="btn btn-primary pull-right">Done Check</button>
                </div>
            </div>
        </div>
    </div>
    <div id="LargeViewerModal_Check" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h4 class="modal-title">Large Viewer</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-2">
                            <div id="dwtVTCheck" class="box-body"></div>
                        </div>
                        <div class="col-lg-10">
                            <div id="dwtLVCheck" class="box-body"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="docUpdateModal" class="modal fade">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Make Document</h3>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-12">
                            <label>Process Documents: </label>

                            <button class="btn btnc1 btn-app btn-flat btnScan" ng-click="docMakeCheckVM.AcquireImage_Update();">
                                <i class="fa fa-print"></i> Scan
                            </button>

                            <a class="btn btnc2 btn-app btn-flat btnLoad" ng-click="docMakeCheckVM.LoadImage_Update()">
                                <i class="fa fa-inbox"></i> Load PDF
                            </a>

                            <a class="btn btnc2 btn-app btn-fla bg-blue-gradient" ng-click="docMakeCheckVM.LoadImageWithoutBlank_Update()" style="position: relative;">

                                <i class="fa fa-book"></i> Load Blank PDF

                            </a>
                            <a class="btn btnc3 btn-app btn-flat btnRemove" ng-click="docMakeCheckVM.RemoveAllSelectedImages_Update()">
                                <i class="fa fa-remove"></i> Remove
                            </a>
                            <a class="btn btnc2 btn-app btn-flat btnRotate" ng-click="docMakeCheckVM.RotateRight_Update()">
                                <i class="fa fa-rotate-right"></i> Rotate
                            </a>
                            <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docMakeCheckVM.ShowMoveImageDiv_Update()">
                                <i class="fa fa-reorder"></i> Move Image
                            </a>
                            <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="docMakeCheckVM.ShowUploadImageDiv_Update()">
                                <i class="fa fa-reorder"></i> Upload Other
                            </a>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div id="MoveImage" class="row hidden">
                            <div class="col-lg-2"></div>
                            <div class="col-lg-10">
                                <label>Which Image</label><input type="text" id="WhichImage_Update" />
                                <label>Where</label><input type="text" id="Where_Update" />
                                <button class="btn btn-primary btn-flat btn-sm" ng-click="docMakeCheckVM.MoveImage_Update()">Move</button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div id="dwtHTMakeUpdate" style="height:200px;"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" ng-click="docMakeCheckVM.UpdateDocument()" type="button">Update</button>
                </div>
            </div>
        </div>
    </div>
    <div id="addNewListItemModal" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Add New List Item</h3>
                </div>
                <div class="modal-body">
                    <div class="row" ng-repeat="item in ListItems.ColumnList track by $index" ng-if="ListItems.ColumnList[$index].FieldTitle != 'ID' && ListItems.ColumnList[$index].FieldTitle != 'ObjectID'">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label for="F_{{ListItems.ColumnList[$index].FieldTitle}}" class="control-label">{{ListItems.ColumnList[$index].FieldTitle}} </label>
                        </div>
                        <div class="col-sm-8 col-md-8 col-lg-8" ng-if="ListItems.ColumnList[$index].RelationID == 0">
                            <input class="form-control" name="F_{{ListItems.ColumnList[$index].FieldTitle}}" ng-model="ListItems.ColumnList[$index].Value" />
                        </div>
                        <div class="col-sm-8 col-md-8 col-lg-8" ng-if="ListItems.ColumnList[$index].RelationID > 0">
                            <select ng-model="ListItems.ColumnList[$index].Value" class="form-control" ng-init="ListItems.ColumnList[$index].Value='';getMasterMk($index,ListItems.ColumnList[$index].Master)">
                                <option value="">--Select--</option>
                                <option value="{{m.ID}}" ng-repeat="m in ListItems.ColumnList[$index].List">{{m.Name}}</option>
                            </select>
                        </div>
                    </div>
                    <br />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" ng-click="docMakeCheckVM.AddSingleListItem()" type="button">Update</button>
                </div>
            </div>
        </div>
    </div>
    <div id="viewerModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Image Viewer</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>

                        <div id="dwtLargeViewer" class="box-body"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="box-body hidden" id="q-view-body">
        <div id="dwtQuickViewerOfCheck" class="box-body"></div>
    </div>
    <div ng-if="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" />
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>

<script type="text/javascript">
    app.controller('ProcessingStageCtrl', function ($scope, $http, $sce) {
        // applySecurity();
        $scope.isFirstStage = false;
        $scope.hasChack = true;
        $scope.hasMake = true;
        $scope.isUserMaker = true;
        $scope.isUserChecker = true;
        $scope.OwnerName = "";
        $scope.OwnerID = "";
        $scope.DocCategoryID = "";
        $scope.DocCategoryName = "";
        $scope.DocTypeID = "";
        $scope.DocTypeName = "";
        $scope.OwnerLevelName = "";
        $scope.OwnerLevelID = ""

        var qrStr = window.location.search.substring(1);

        var qrStrVariables = qrStr.split('&');

        var qrStrone = qrStrVariables[0].split('=');

        $scope.stageID = qrStrone[1];

        $http.get('/WorkflowModule/DocMkCkStage/GetStageAndUserPermission?stageMapID=' + $scope.stageID + '')
            .success(function (response) {

                $scope.hasChack = response.obj.HaveCk;
                $scope.hasMake = response.obj.HaveMk;
                $scope.stageName = response.obj.StageName;
                $scope.isFirstStage = response.obj.StageSL > 1 ? false : true;
                $scope.isUserMaker = response.obj.NotifyMk;
                $scope.isUserChecker = response.obj.NotifyCk;
                $scope.OwnerName = response.obj.OwnerName;
                $scope.OwnerID = response.obj.OwnerID;
                $scope.DocCategoryID = response.obj.DocCategoryID;
                $scope.DocCategoryName = response.obj.DocCategoryName;
                $scope.DocTypeID = response.obj.DocTypeID;
                $scope.DocTypeName = response.obj.DocTypeName;
                $scope.OwnerLevelName = response.obj.OwnerLevelName;
                $scope.OwnerLevelID = response.obj.OwnerLevelID;

                $scope.loading = false;
                BindDataToGrid();
                loadPropsDocs();
            })
            .error(function () {
                $scope.loading = false;
            });


        var DWObject;
        var DWObjectLargeViewer;
        var zoomFactor = .5;

        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);
        function Dynamsoft_OnReady() {
            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');
            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;

            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtHorizontalThumbnil');
            DWObject.SetViewMode(4, -1);
            DWObject.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
            DWObject.JPEGQuality = 20;
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;
            DWObject.RegisterEvent('OnMouseDoubleClick', $scope.updateLargeViewer);
            DWObject.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                DWObject.Erase(sImageIndex, left, top, right, bottom);
            });
        };

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };
        //#endregion

        //#region Document Generation

        $scope.docGenerationModelCollection = {
            docsForSpecificDocType: [],
            propsForSpecificDocType: []
        };

        $scope.docGenerationVM = {};

        var loadPropsDocs = function () {
            $scope.docGenerationModelCollection.docsForSpecificDocType = [];
            $scope.docGenerationModelCollection.propsForSpecificDocType = [];
            $scope.docGenerationModelCollection.listPropsForSpecificDocType = [];

            $http.post('/WorkflowModule/DocMkCkStage/GetDocumentProperty',
                {
                    _DocCategoryID: $scope.DocCategoryID,
                    _OwnerID: $scope.OwnerID,
                    _DocTypeID: $scope.DocTypeID,
                    _StageMapID: $scope.stageID
                })
                .success(function (response) {

                    $scope.docGenerationModelCollection.docsForSpecificDocType = response.obj.Documents;
                    $scope.docGenerationModelCollection.propsForSpecificDocType = response.obj.TypeProperties;
                    $scope.docGenerationModelCollection.listPropsForSpecificDocType = response.obj.ListTypeProperties;

                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });
        };

        $scope.docGenerationVM.SelectAll = function () {
            angular.forEach($scope.docGenerationModelCollection.docsForSpecificDocType, function (item) {
                if (item.StageMapID == $scope.stageID && item.DocClassification != 'Required') {
                    item.IsSelected = true;
                }
            });
        };

        $scope.docGenerationVM.UnSelectAll = function () {
            angular.forEach($scope.docGenerationModelCollection.docsForSpecificDocType, function (item) {
                if (item.StageMapID == $scope.stageID && item.DocClassification != 'Required') {
                    item.IsSelected = false;
                }
            });
        };

        $scope.docGenerationVM.UploadNewDocument = function () {

            $('#ConfirmSave').modal('hide');

            $scope.loading = true;

            var selectedPropID = new Array();
            var DocIDsCounter = 0;

            var fileUpload = $("#FileUpload1").get(0);
            var files = fileUpload.files;
            var extentionsArr = [];

            if ($scope.ShowUploadImageDivVar) {
                angular.forEach(files, function (item) {
                    extentionsArr.push(item.name.split('.').pop());
                });
            }
            else {
                angular.forEach($scope.docGenerationModelCollection.docsForSpecificDocType, function (item) {
                    if (item.IsSelected) {
                        selectedPropID.push(item.DocPropertyID);
                    };
                });
            }
            $scope.imgChk = 0;
            for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {
                var x = DWObject.IsBlankImageExpress(i);
                if (x) {
                    $scope.imgChk++;
                }
            }

            if ($scope.imgChk !== selectedPropID.length) {
                toastr.error("There is a mismatch between the number of documents selected and the number of documents scaned.");
                $scope.loading = false;
                return;
            }
            $scope.loading = true;

            var dataToSend = {
                '_modelDocumentsInfo': { OwnerLevelID: $scope.OwnerLevelID, OwnerID: $scope.OwnerID, DocCategoryID: $scope.DocCategoryID, DocTypeID: $scope.DocTypeID },
                '_SelectedPropID': selectedPropID.join(),
                '_docMetaValues': $scope.docGenerationModelCollection.propsForSpecificDocType,
                '_listProperty': $scope.docGenerationModelCollection.listPropsForSpecificDocType,

                '_extentions': extentionsArr.join(),
                '_otherUpload': $scope.ShowUploadImageDivVar
            };
            // console.log(dataToSend);
            $http.post('/WorkflowModule/DocMkCkStage/AddDocumentInfo', JSON.stringify(dataToSend))
                .success(function (response) {
                    var uploadCount = 0;
                    var docCounts = 0;
                    console.log(response);
                    for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {
                        if (DWObject.IsBlankImageExpress(i))
                            docCounts++;
                    }
                    if (response.DistinctID.length > 0) {

                        if ($scope.ShowUploadImageDivVar) {
                            if (files.length > 0 && files.length == response.DistinctID.length) {
                                var breakFlag = false;
                                for (var i = 0; i < files.length || breakFlag; i++) {

                                    if (window.FormData !== undefined) {

                                        var fileData = new FormData();

                                        fileData.append('serverIP', response.result[0].ServerIP);
                                        fileData.append('ftpPort', response.result[0].ServerPort);
                                        fileData.append('ftpUserName', response.result[0].FtpUserName);
                                        fileData.append('ftpPassword', response.result[0].FtpPassword);
                                        fileData.append('serverURL', response.DistinctID[i].FileServerUrl);
                                        fileData.append('documentID', response.DistinctID[i].DocumentID);
                                        fileData.append('Ext', files[i].name.split('.').pop());

                                        fileData.append(files[i].name, files[i]);

                                        $.ajax({
                                            url: '/DocScanningModule/MultiDocScan/UploadOtherFiles',
                                            type: "POST",
                                            contentType: false,
                                            processData: false,
                                            data: fileData,
                                            success: function (result) {
                                                uploadCount++;
                                                if (uploadCount == files.length) {
                                                    $scope.docPropIdentityGridData = response.result;
                                                    $scope.BindDataToGrid();
                                                    toastr.success("Document Uploaded Succesfully");
                                                    $scope.loading = false;
                                                    var $el = $('#FileUpload1');
                                                    $el.wrap('<form>').closest('form').get(0).reset();
                                                    $el.unwrap();
                                                }
                                            },
                                            error: function (err) {
                                                toastr.error("Document Upload Falied");
                                                breakFlag = true;
                                                $scope.loading = false;
                                            }
                                        });
                                    } else {
                                        toastr.error("FormData is not supported.");
                                        $scope.loading = false;
                                        break;
                                    }
                                }
                            }
                            else {
                                $http.post('/DocScanningModule/MultiDocScan/DeleteDocumentInfo',
                                    {
                                        _DocumentIDs: response.result[0].ObjectID
                                    })
                                    .success(function (response) {
                                        $scope.loading = false;
                                        toastr.success("Scanned documents count is different than your selection");
                                    })
                                    .error(function () {
                                        $scope.loading = false;
                                    });
                            }
                        }
                        else {
                            if (docCounts > 0 && docCounts == response.DistinctID.length) {
                                for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {

                                    if (DWObject.IsBlankImageExpress(i)) {
                                        DWObject.IfShowFileDialog = false;

                                        var strFTPServer = response.result[0].ServerIP;
                                        DWObject.FTPPort = response.result[0].ServerPort;
                                        DWObject.FTPUserName = response.result[0].FtpUserName;
                                        DWObject.FTPPassword = response.result[0].FtpPassword;

                                        var isSave = DWObject.FTPUploadAsMultiPagePDF(strFTPServer,
                                            response.DistinctID[DocIDsCounter].FileServerUrl + "//" +
                                            response.DistinctID[DocIDsCounter].DocumentID + ".pdf");

                                        if (isSave) {
                                            DocIDsCounter++;
                                            DWObject.RemoveAllSelectedImages();
                                            DWObject.RemoveImage(0);
                                            i = -1;
                                            uploadCount++;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        DWObject.SelectedImagesCount = i + 1;
                                        DWObject.SetSelectedImageIndex(i, i);
                                    }
                                }

                                if (uploadCount == response.DistinctID.length) {
                                    loadPropsDocs();
                                    $scope.loading = false;
                                    toastr.success("Upload Successful");
                                } else {
                                    $http.post('/WorkflowModule/DocMkCkStage/DeleteDocumentInfo',
                                        {
                                            _DocumentIDs: response.result[0].ObjectID
                                        })
                                        .success(function (response) {
                                            $scope.loading = false;
                                            toastr.success("File Upload Failed to FTP");
                                        })
                                        .error(function () {
                                            $scope.loading = false;
                                        });
                                }
                            }
                            else {
                                $http.post('/WorkflowModule/DocMkCkStage/DeleteDocumentInfo',
                                    {
                                        _DocumentIDs: response.result[0].ObjectID
                                    })
                                    .success(function (response) {
                                        $scope.loading = false;
                                        toastr.success("Scanned documents count is different than your selection");
                                    })
                                    .error(function () {
                                        $scope.loading = false;
                                    });
                            }
                        }
                    }
                    else {
                        toastr.success(response.Message);
                        $scope.loading = false;
                    }
                })
                .error(function () {
                    $scope.loading = false;
                    toastr.success("Failed to Save Meta Data.");
                });
        };

        $scope.docGenerationVM.ShowConfirmModal = function () {
            $('#ConfirmSave').modal('show');
        };
        $scope.docGenerationVM.Load = function () {
            DWObject.IfShowFileDialog = true;
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_PDF);
            $scope.ShowUploadImageDivVar = false;
        };
        //#region docgeneration_Dynamo
        $scope.docGenerationVM.AcquireImage = function () {
            if (DWObject) {
                DWObject.IfAutomaticDeskew = true;
                DWObject.IfAutoDiscardBlankpages = false;
                DWObject.IfDisableSourceAfterAcquire = true;	// Scanner source will be disabled/closed automatically after the scan.
                DWObject.AcquireImage();
            }
        };

        $scope.docGenerationVM.LoadImage = function () {
            DWObject.IfShowFileDialog = true;

            //DWObject.RemoveAllImages();
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_PDF);

            $scope.ShowUploadImageDivVar = false;
        };

        $scope.docGenerationVM.RemoveAllSelectedImages = function () {
            DWObject.RemoveAllSelectedImages();
        }

        $scope.docGenerationVM.RotateRight = function () {
            DWObject.RotateRight(DWObject.GetSelectedImageIndex(0));
        }

        $scope.docGenerationVM.ShowMoveImageDiv = function () {
            $("#MoveImage").toggleClass("hidden");
            $scope.docGenerationVM.ShowUploadImageDivVar = false;
        }

        $scope.docGenerationVM.MoveImage = function () {
            DWObject.MoveImage(($("#WhichImage").val() - 1), ($("#Where").val() - 1));
            $("#MoveImage").toggleClass("hidden");
            $scope.docGenerationVM.ShowUploadImageDivVar = false;
        };

        $scope.docGenerationVM.ShowUploadImageDivVar = false;

        $scope.docGenerationVM.ShowUploadImageDiv = function () {
            if ($scope.docGenerationVM.ShowUploadImageDivVar)
                $scope.docGenerationVM.ShowUploadImageDivVar = false;
            else {
                $scope.docGenerationVM.ShowUploadImageDivVar = true;
            }
        };
        $scope.docGenerationVM.LoadImageWithoutBlank = function () {
            DWObject.IfShowFileDialog = true;
            DWObject.HTTPDownloadEx('', '/Buffer/BlankPDF/blank.pdf', 3);
            $scope.ShowUploadImageDivVar = false;
        };
        $scope.docGenerationVM.AddNewListItem = function (item, index) {

            var tempItem = angular.copy(item);

            angular.forEach(tempItem.ColumnList, function (item) {
                if (item.Value) {
                    item.Value = "";
                }
            })

            $scope.docGenerationModelCollection.listPropsForSpecificDocType.splice(index + 1, 0, tempItem);
        };

        $scope.docGenerationVM.RemoveListItem = function (index) {
            $scope.docGenerationModelCollection.listPropsForSpecificDocType.splice(index, 1);
        }
        //#endregion
        //#endregion

        //#region Document_MakerChecker
        $scope.docMakeCheckModelCollection = {
            updatePropertyCollection: [],
            updateDocumentCollection: [],
            newDocumentCollection: [],
            allDocumentCollection: [],
            listPropertyCollectionCk: [],
            listPropertyCollectionMk: [],
            ParentStages: [],
            objectID: "",
            listPropertyHead: {},
            listPropertyBody: {}
        };

        $scope.pagingInfo = {
            page: 1,
            itemsPerPage: 5,
            sortBy: null,
            reverse: false,
            search: null,
            totalItems: 0
        };

        $scope.search = function (keyEvent) {
            if (keyEvent.which === 13) {
                $scope.pagingInfo.page = 1;
                BindDataToGrid();
            }
        };

        $scope.sort = function (sortBy) {
            if (sortBy === $scope.pagingInfo.sortBy) {
                $scope.pagingInfo.reverse = !$scope.pagingInfo.reverse;
            } else {
                $scope.pagingInfo.sortBy = sortBy;
                $scope.pagingInfo.reverse = false;
            }

            $scope.pagingInfo.page = 1;
            BindDataToGrid();
        };

        $scope.selectPage = function () {
            BindDataToGrid();
        };

        $scope.docMakeCheckVM = {};

        $scope.docMakeCheckVM.ShowMakeModal = function (ObjectID) {
            $scope.docMakeCheckModelCollection.objectID = ObjectID;
            loadMakeModal(ObjectID);
            $('#docMakerModal').modal('show');
        };

        var loadMakeModal = function (ObjectID) {
            $scope.loading = true;
            $http.get('/WorkflowModule/DocMkCkStage/GetDocumentPropertyValuesMake?_ObjectID=' + ObjectID + '&_StageMapID=' + $scope.stageID)
                .success(function (response) {
                    $scope.docMakeCheckModelCollection.updatePropertyCollection = response.updatePropertyCollection;
                    $scope.docMakeCheckModelCollection.updateDocumentCollection = response.updateDocumentCollection;
                    $scope.docMakeCheckModelCollection.ParentStages = response.ParentStages;
                    $scope.docMakeCheckModelCollection.newDocumentCollection = response.newDocumentCollection;
                    $scope.docMakeCheckModelCollection.IsBacked = response.IsBacked;
                    $scope.docMakeCheckModelCollection.BackReason = response.BackReason;
                    $scope.docMakeCheckModelCollection.listPropertyCollectionMk = [];
                    //console.log($scope.docMakeCheckModelCollection.ParentStages);
                    angular.forEach(response.listPropHtml, function (item) {
                        if (item) {
                            $scope.docMakeCheckModelCollection.listPropertyCollectionMk.push($sce.trustAsHtml(item));
                        }
                    });

                    $scope.loading = false;
                })
                .error(function () {
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.ShowCheckModal = function (ObjectID) {
            //console.log(ObjectID);
            $scope.docMakeCheckModelCollection.objectID = ObjectID;
            loadCheckModal(ObjectID);
            $('#docCheckerModal').modal('show');
        };

        var loadCheckModal = function (ObjectID) {
            $scope.loading = true;
            $http.get('/WorkflowModule/DocMkCkStage/GetDocumentPropertyValuesCheck?_ObjectID=' + ObjectID + '&_StageMapID=' + $scope.stageID)
                .success(function (response) {
                    $scope.docMakeCheckModelCollection.updatePropertyCollection = response.updatePropertyCollection;
                    $scope.docMakeCheckModelCollection.allDocumentCollection = response.allDocumentCollection;
                    $scope.docMakeCheckModelCollection.ParentStages = response.ParentStages;

                    $scope.docMakeCheckModelCollection.IsBacked = response.IsBacked;
                    $scope.docMakeCheckModelCollection.BackReason = response.BackReason;

                    $scope.docMakeCheckModelCollection.listPropertyCollectionCk = [];
                    //console.log($scope.docMakeCheckModelCollection.ParentStages);
                    angular.forEach(response.listPropHtml, function (item) {
                        if (item) {
                            $scope.docMakeCheckModelCollection.listPropertyCollectionCk.push($sce.trustAsHtml(item));
                        }
                    });

                    $scope.loading = false;
                })
                .error(function () {
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.LoadListProperty = function (tableRefID, index) {
            $http.get('/WorkflowModule/DocMkCkStage/GetDocumentListPropertyValuesCheck?_ObjectID=' + $scope.docMakeCheckModelCollection.objectID + '&&_TableRefID=' + tableRefID + '')
                .success(function (response) {
                    $scope.docMakeCheckModelCollection.listPropertyCollectionCk[index].tableData = $sce.trustAsHtml(response);
                    $scope.loading = false;
                })
                .error(function () {
                    $scope.loading = false;
                });
        };

        //#region Dynamosoft_Conf
        //make----------------------------------------------------------
        var DWObjectOFMakeUpdate;
        Dynamsoft.WebTwainEnv.CreateDWTObject('dwtHTMakeUpdate',
            function (dwtObject) {
                DWObjectOFMakeUpdate = dwtObject;
                DWObjectOFMakeUpdate.SetViewMode(4, -1);
                DWObjectOFMakeUpdate.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
                DWObjectOFMakeUpdate.JPEGQuality = 20;
                DWObjectOFMakeUpdate.FitWindowType = 0;
                DWObjectOFMakeUpdate.Width = $(window).width() - 235;
                DWObjectOFMakeUpdate.SelectionImageBorderColor = 0x691254;
                DWObjectOFMakeUpdate.ShowPageNumber = true;
                DWObjectOFMakeUpdate.IfAppendImage = true;

                DWObjectOFMakeUpdate.RegisterEvent('OnMouseDoubleClick', function () {
                    DWObjectOFMakeUpdate.CopyToClipboard(DWObjectOFMakeUpdate.CurrentImageIndexInBuffer);
                    DWObjectLargeViewer.LoadDibFromClipboard();
                    $('#viewerModal').modal('show');
                });

                DWObjectOFMakeUpdate.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                    DWObjectOFMakeUpdate.Erase(sImageIndex, left, top, right, bottom);
                });
            },
            function (errorString) {
                alert('WebTwain Loading Error');
            }
        );

        var DWObjectOFMakeCreate;
        Dynamsoft.WebTwainEnv.CreateDWTObject('dwtHTMakeCreate',
            function (dwtObject) {
                DWObjectOFMakeCreate = dwtObject;
                DWObjectOFMakeCreate.SetViewMode(4, -1);
                DWObjectOFMakeCreate.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
                DWObjectOFMakeCreate.JPEGQuality = 20;
                DWObjectOFMakeCreate.FitWindowType = 0;
                DWObjectOFMakeCreate.Width = $(window).width() - 260;
                DWObjectOFMakeCreate.SelectionImageBorderColor = 0x691254;
                DWObjectOFMakeCreate.ShowPageNumber = true;
                DWObjectOFMakeCreate.IfAppendImage = true;

                DWObjectOFMakeCreate.RegisterEvent('OnMouseDoubleClick', function () {
                    DWObjectOFMakeCreate.CopyToClipboard(DWObjectOFMakeCreate.CurrentImageIndexInBuffer);
                    DWObjectLargeViewer.LoadDibFromClipboard();
                    $('#viewerModal').modal('show');
                });
                DWObjectOFMakeCreate.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                    DWObjectOFMakeCreate.Erase(sImageIndex, left, top, right, bottom);
                });
            },
            function (errorString) {
                alert('WebTwain Loading Error');
            }
        );
        //#region Dynamo_Helper_create
        $scope.docMakeCheckVM.AcquireImage_Create = function () {
            if (DWObjectOFMakeCreate) {
                DWObjectOFMakeCreate.IfAutomaticDeskew = true;
                DWObjectOFMakeCreate.IfAutoDiscardBlankpages = false;
                DWObjectOFMakeCreate.AcquireImage();
            }
        };

        $scope.docMakeCheckVM.LoadImage_Create = function () {
            DWObjectOFMakeCreate.IfShowFileDialog = true;
            // DWObjectOFMakeCreate.RemoveAllImages();
            DWObjectOFMakeCreate.LoadImageEx("", EnumDWT_ImageType.IT_PDF);
        };

        $scope.docMakeCheckVM.RemoveAllSelectedImages_Create = function () {
            DWObjectOFMakeCreate.RemoveAllSelectedImages();
        }
        $scope.docMakeCheckVM.LoadImageWithoutBlank = function () {

            DWObjectOFMakeCreate.IfShowFileDialog = true;
            DWObjectOFMakeCreate.HTTPDownloadEx('', '/Buffer/BlankPDF/blank.pdf', 3);
            $scope.ShowUploadImageDivVar = false;
        }
        $scope.docMakeCheckVM.LoadImageWithoutBlank_Update = function () {

            DWObjectOFMakeUpdate.IfShowFileDialog = true;
            DWObjectOFMakeUpdate.HTTPDownloadEx('', '/Buffer/BlankPDF/blank.pdf', 3);
            $scope.ShowUploadImageDivVar = false;
        }
        $scope.docMakeCheckVM.RotateRight_Create = function () {
            DWObjectOFMakeCreate.RotateRight(DWObjectOFMakeCreate.GetSelectedImageIndex(0));
        }

        $scope.docMakeCheckVM.ShowMoveImageDiv_Create = function () {
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        }

        $scope.docMakeCheckVM.MoveImage_Create = function () {
            DWObjectOFMakeCreate.MoveImage(($("#WhichImage_Create").val() - 1), ($("#Where_Create").val() - 1));
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        };
        //#endregion
        //#region Dynamo_Helper_update
        $scope.docMakeCheckVM.AcquireImage_Update = function () {
            if (DWObjectOFMakeUpdate) {
                DWObjectOFMakeUpdate.IfAutomaticDeskew = true;
                DWObjectOFMakeUpdate.IfAutoDiscardBlankpages = false;
                DWObjectOFMakeUpdate.AcquireImage();
            }
        };

        $scope.docMakeCheckVM.LoadImage_Update = function () {
            DWObjectOFMakeUpdate.IfShowFileDialog = true;
            //DWObjectOFMakeUpdate.RemoveAllImages();
            DWObjectOFMakeUpdate.LoadImageEx("", EnumDWT_ImageType.IT_PDF);
        };

        $scope.docMakeCheckVM.RemoveAllSelectedImages_Update = function () {
            DWObjectOFMakeUpdate.RemoveAllSelectedImages();
        }

        $scope.docMakeCheckVM.RotateRight_Update = function () {
            DWObjectOFMakeUpdate.RotateRight(DWObjectOFMakeUpdate.GetSelectedImageIndex(0));
        }

        $scope.docMakeCheckVM.ShowMoveImageDiv_Update = function () {
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        }

        $scope.docMakeCheckVM.MoveImage_Update = function () {
            DWObjectOFMakeUpdate.MoveImage(($("#WhichImage_Update").val() - 1), ($("#Where_Update").val() - 1));
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        };
        //#endregion

        //Check----------------------------------
        var DWObjectOFCheckLargerView;
        Dynamsoft.WebTwainEnv.CreateDWTObject('dwtLVCheck',
            function (dwtObject) {
                DWObjectOFCheckLargerView = dwtObject;
                DWObjectOFCheckLargerView.SetViewMode(-1, -1);
                DWObjectOFCheckLargerView.MaxImagesInBuffer = 1;
                DWObjectOFCheckLargerView.Width = 9.69 * 90;
                DWObjectOFCheckLargerView.Height = $(window).height();
            },
            function (errorString) {
                alert('WebTwain Loading Error');
            }
        );

        var DWObjectOFCheck;

        Dynamsoft.WebTwainEnv.CreateDWTObject('dwtVTCheck',
            function (dwtObject) {
                DWObjectOFCheck = dwtObject;
                DWObjectOFCheck.SetViewMode(-1, 4);
                DWObjectOFCheck.FitWindowType = 0;
                DWObjectOFCheck.SelectionImageBorderColor = 0x691254;
                DWObjectOFCheck.ShowPageNumber = true;
                DWObjectOFCheck.IfAppendImage = true;
                DWObjectOFCheck.Width = 152;
                DWObjectOFCheck.Height = $(window).height();
                DWObjectOFCheck.RegisterEvent('OnMouseClick',
                    function () {
                        DWObjectOFCheck.CopyToClipboard(DWObjectOFCheck.CurrentImageIndexInBuffer);
                        DWObjectOFCheckLargerView.LoadDibFromClipboard();
                    });
            },
            function (errorString) {
                alert('WebTwain Loading Error');
            }
        );

        var DWObjectOFCheckQuickView;

        Dynamsoft.WebTwainEnv.CreateDWTObject('dwtQuickViewerOfCheck',
            function (dwtObject) {
                DWObjectOFCheckQuickView = dwtObject;
                DWObjectOFCheckQuickView.SetViewMode(1, 1);
                DWObjectOFCheckQuickView.Width = 9.69 * 100;
                DWObjectOFCheckQuickView.Height = 10.69 * 70;
            },
            function (errorString) {
                alert('WebTwain Loading Error');
            }
        );

        $scope.LargeViewOfCheck = function (item) {
            if (item.DocumentID.length > 0) {
                DWObjectOFCheck.IfShowFileDialog = false;
                DWObjectOFCheck.RemoveAllImages();
                DWObjectOFCheckLargerView.RemoveAllImages();
                DWObjectOFCheck.FTPPort = item.ServerPort;
                DWObjectOFCheck.FTPUserName = item.FtpUserName;
                DWObjectOFCheck.FTPPassword = item.FtpPassword;
                DWObjectOFCheck.FTPDownload(item.ServerIP, (item.FileServerURL + "//" + item.DocumentID + ".pdf"));

                $('#LargeViewerModal_Check').modal('show');
            }
            else {
                toastr.error("Document Hasn't Been Uploaded");
            }
        }



        //$scope.QuickViewOfCheck = function (item, index) {

        //    if (item.DocumentID.length>0)
        //    {
        //        var preIndex = -1;
        //        $("#dwtQuickViewerOfCheck").appendTo("#q_view_loader_" + index + "");
        //        DWObjectOFCheckQuickView.IfShowFileDialog = false;
        //        DWObjectOFCheckQuickView.RemoveAllImages();

        //        DWObjectOFCheckQuickView.FTPPort = item.ServerPort;
        //        DWObjectOFCheckQuickView.FTPUserName = item.FtpUserName;
        //        DWObjectOFCheckQuickView.FTPPassword = item.FtpPassword;

        //        DWObjectOFCheckQuickView.FTPDownload(item.ServerIP, (item.FileServerURL + "//" + item.DocumentID + ".pdf"));

        //        if (preIndex != -1) {
        //            $("#showqview_" + preIndex + "").collapse("hide");
        //        }

        //        preIndex = index;

        //    }
        //        else {

        //        toastr.error("Document Hasn't Been Uploaded");
        //    }

        //};
        //#endregion

        //#region Initialize data
        var BindDataToGrid = function () {
            $scope.loading = true;
            $scope.tableData = '';

            $http.post('/WorkflowModule/DocMkCkStage/GetMkCkDocuments',
                {
                    _DocCategoryID: $scope.DocCategoryID,
                    _OwnerID: $scope.OwnerID,
                    _DocTypeID: $scope.DocTypeID,
                    _StageMapID: $scope.stageID,
                    isUserMaker: $scope.isUserMaker,
                    isUserChecker: $scope.isUserChecker,
                    page: $scope.pagingInfo.page,
                    itemsPerPage: $scope.pagingInfo.itemsPerPage,
                    sortBy: '[ObjectID]',
                    reverse: $scope.pagingInfo.reverse,
                    search: $scope.pagingInfo.search
                })
                .success(function (pageable) {
                    $scope.tableData = $sce.trustAsHtml(pageable.html);
                    $scope.pagingInfo.totalItems = pageable.totalPages;
                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });
        };
        //#endregion


        //#region ActionMethods

        var UpdatedItem = {};

        $scope.docMakeCheckVM.GetImage = function (item) {

            $('#docUpdateModal').modal('show');

            UpdatedItem = item;

            DWObjectOFMakeUpdate.IfShowFileDialog = false;
            DWObjectOFMakeUpdate.RemoveAllImages();

            DWObjectOFMakeUpdate.FTPPort = item.ServerPort;
            DWObjectOFMakeUpdate.FTPUserName = item.FtpUserName;
            DWObjectOFMakeUpdate.FTPPassword = item.FtpPassword;

            DWObjectOFMakeUpdate.FTPDownload(item.ServerIP, (item.FileServerURL + "//" + item.DocumentID + ".pdf"));
        };

        $scope.docMakeCheckVM.UpdateDocument = function () {
            if (UpdatedItem.DocumentID) {
                DWObjectOFMakeUpdate.IfShowFileDialog = false;
                var strFTPServer = UpdatedItem.ServerIP;
                DWObjectOFMakeUpdate.FTPPort = UpdatedItem.ServerPort;
                DWObjectOFMakeUpdate.FTPUserName = UpdatedItem.FtpUserName;
                DWObjectOFMakeUpdate.FTPPassword = UpdatedItem.FtpPassword;

                var isSave = DWObjectOFMakeUpdate.FTPUploadAllAsPDF(strFTPServer,
                    UpdatedItem.FileServerURL + "//" +
                    UpdatedItem.DocumentID + ".pdf");

                if (isSave) {
                    $scope.loading = false;
                    toastr.success("Upload Successful");
                    UpdatedItem = {};
                    $('#docUpdateModal').modal('hide');
                }
                else {
                    toastr.error('Document Update Failed');
                }
            }
            else {
                toastr.error('No Document Selected');
            }
        };

        $scope.docMakeCheckVM.CreateDocument = function () {
            $scope.loading = true;

            var selectedPropIDMk = new Array();

            var DocIDsCounterMk = 0;

            angular.forEach($scope.docMakeCheckModelCollection.newDocumentCollection, function (item) {
                if (item.IsSelected) {
                    selectedPropIDMk.push(item.DocPropertyID);
                };
            });

            $http.post('/WorkflowModule/DocMkCkStage/UpdateDocumentInfo',
                {
                    objectID: $scope.docMakeCheckModelCollection.objectID,
                    docs: selectedPropIDMk.join(),
                    props: $scope.docMakeCheckModelCollection.updatePropertyCollection,
                })
                .success(function (response) {
                    $scope.loading = false;
                    var uploadCount = 0;
                    var docCounts = 0;
                    console.log(response);

                    if (selectedPropIDMk.length == 0 && selectedPropIDMk.length == response.result.length) {
                        $http.post('/WorkflowModule/DocMkCkStage/SetMakeDone',
                            {
                                objectID: $scope.docMakeCheckModelCollection.objectID,
                                stageMapID: $scope.stageID
                            })
                            .success(function (response) {
                                BindDataToGrid();
                                $('#docMakerModal').modal('hide');
                                if (response.Code == "0") {
                                    toastr.error(response.Message);

                                }
                                else {
                                    toastr.success(response.Message);
                                }

                            }).error(function () {
                            });

                        return;
                    }

                    for (var i = 0; i <= DWObjectOFMakeCreate.HowManyImagesInBuffer - 1; i++) {
                        if (DWObjectOFMakeCreate.IsBlankImageExpress(i))
                            docCounts++;
                    }

                    if (docCounts > 0 && docCounts == response.result.length) {
                        for (var i = 0; i <= DWObjectOFMakeCreate.HowManyImagesInBuffer - 1; i++) {

                            if (DWObjectOFMakeCreate.IsBlankImageExpress(i)) {
                                DWObjectOFMakeCreate.IfShowFileDialog = false;

                                var strFTPServer = response.result[0].ServerIP;
                                DWObjectOFMakeCreate.FTPPort = response.result[0].ServerPort;
                                DWObjectOFMakeCreate.FTPUserName = response.result[0].FtpUserName;
                                DWObjectOFMakeCreate.FTPPassword = response.result[0].FtpPassword;

                                var isSave = DWObjectOFMakeCreate.FTPUploadAsMultiPagePDF(strFTPServer,
                                    response.result[DocIDsCounterMk].FileServerURL + "//" +
                                    response.result[DocIDsCounterMk].DocumentID + ".pdf");

                                if (isSave) {
                                    DocIDsCounterMk++;
                                    DWObjectOFMakeCreate.RemoveAllSelectedImages();
                                    DWObjectOFMakeCreate.RemoveImage(0);
                                    i = -1;
                                    uploadCount++;
                                } else {
                                    break;
                                }

                            } else {
                                DWObjectOFMakeCreate.SelectedImagesCount = i + 1;
                                DWObjectOFMakeCreate.SetSelectedImageIndex(i, i);
                            }
                        }

                        if (uploadCount == response.result.length) {
                            $scope.loading = false;
                            $http.post('/WorkflowModule/DocMkCkStage/SetMakeDone',
                                {
                                    objectID: $scope.docMakeCheckModelCollection.objectID,
                                    stageMapID: $scope.stageID
                                })
                                .success(function (response) {
                                    BindDataToGrid();
                                    $('#docMakerModal').modal('hide');
                                    toastr.success("Document Updated Successfully");
                                }).error(function () {
                                    $scope.loading = false;
                                });
                        }
                        else {
                            $scope.loading = false;
                            $http.post('/WorkflowModule/DocMkCkStage/DeleteDocumentInfo',
                                {
                                    objectID: '',
                                    documentIDs: response.distinctIDs.join(),
                                    action: 'doc'
                                })
                                .success(function (response) {
                                    $scope.loading = false;
                                    toastr.success("File Upload Failed to FTP");
                                })
                                .error(function () {
                                    $scope.loading = false;
                                });
                        }
                    }
                    else {
                        $http.post('/WorkflowModule/DocMkCkStage/DeleteDocumentInfo',
                            {
                                objectID: '',
                                documentIDs: response.distinctIDs.join(),
                                action: 'doc'
                            })
                            .success(function (response) {
                                $scope.loading = false;
                                toastr.success("Scanned documents count is different than your selection");
                            })
                            .error(function () {
                                $scope.loading = false;
                            });
                    }
                })
                .error(function () {
                    $scope.loading = false;
                    toastr.success("Failed to Save Meta Data.");
                });
        };

        $scope.docMakeCheckVM.DoneChecking = function () {
            $http.post('/WorkflowModule/DocMkCkStage/SetCheckDone',
                {
                    objectID: $scope.docMakeCheckModelCollection.objectID,
                    stageMapID: $scope.stageID
                })
                .success(function (response) {
                    if (response.Code == '1') {
                        BindDataToGrid();
                        $('#docCheckerModal').modal('hide');
                        toastr.success(response.Message);
                    }
                    else {
                        toastr.error(response.Message);
                    }
                }).error(function () {
                    toastr.error("Document Check Failed");
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.RevertFromMake = function (_revertFromCheck) {
            SelectedObj = [];
            angular.forEach($scope.docMakeCheckModelCollection.ParentStages, function (item) {
                if (item.IsChecked) {
                    SelectedObj.push(item);
                };
            });

            if (SelectedObj.length < 1) {
                toastr.error('Please! Select a stage to revert');
                return;
            }
            $http.post('/WorkflowModule/DocMkCkStage/RevertFromMake',
                {
                    objectID: $scope.docMakeCheckModelCollection.objectID,
                    stages: SelectedObj,
                    revertReason: _revertFromCheck
                })
                .success(function (response) {
                    if (response.Code == '1') {
                        BindDataToGrid();
                        $('#docMakerModal').modal('hide');
                        toastr.success(response.Message);
                    }
                    else {
                        toastr.success(response.Message);
                    }
                }).error(function () {
                    toastr.error("Failed to revert document");
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.RevertFromCheck = function (_revertFromCheck) {

            SelectedObj = [];
            angular.forEach($scope.docMakeCheckModelCollection.ParentStages, function (item) {
                if (item.IsChecked) {
                    SelectedObj.push(item);
                };
            });
            //console.log($scope.docMakeCheckModelCollection.ParentStages);
            //console.log(SelectedObj);
            if (SelectedObj.length < 1) {
                toastr.error('Please! Select a stage to revert');
                return;
            }
            $http.post('/WorkflowModule/DocMkCkStage/RevertFromCheck',
                {
                    objectID: $scope.docMakeCheckModelCollection.objectID,
                    stages: SelectedObj,
                    revertReason: _revertFromCheck
                })
                .success(function (response) {
                    if (response.Code == '1') {
                        BindDataToGrid();
                        $('#docCheckerModal').modal('hide');
                        toastr.success(response.Message);
                    }
                    else {
                        toastr.success(response.Message);
                    }

                }).error(function () {
                    toastr.error("Failed to revert document");
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.DeleteListItem = function (tableRefID, id) {
            if (tableRefID == '') {
                toastr.error("Item cant be deleted");
                return;
            }
            if (id == '') {
                toastr.error("Item cant be deleted");
                return;
            }

            $http.post('/WorkflowModule/DocMkCkStage/DeleteListItem',
                {
                    tableRefID: tableRefID,
                    id: id
                })
                .success(function (response) {
                    if (response.Code == '1') {
                        toastr.success(response.Message);
                        loadMakeModal($scope.docMakeCheckModelCollection.objectID);
                    }
                    else {
                        toastr.success(response.Message);
                    }
                }).error(function () {
                    toastr.error("Failed to revert document");
                    $scope.loading = false;
                });
        }

        $scope.ListItems = [];

        $scope.docMakeCheckVM.toggleAddNew = function (tableRefID) {
            $('#addNewListItemModal').modal('show');

            $http.get('/WorkflowModule/DocMkCkStage/ToggleAddNewListItem?tableRefID=' + tableRefID + '')
                .success(function (response) {
                    $scope.ListItems = response;
                    $scope.loading = false;
                })
                .error(function () {
                    $scope.loading = false;
                });
        };

        $scope.docMakeCheckVM.AddSingleListItem = function () {
            $http.post('/WorkflowModule/DocMkCkStage/AddSingleListItem',
                {
                    listItemColumn: $scope.ListItems.ColumnList,
                    tableRefID: $scope.ListItems.TableRefID,
                    objectID: $scope.docMakeCheckModelCollection.objectID
                })
                .success(function (response) {
                    if (response.Code == '1') {
                        toastr.success(response.Message);
                        loadMakeModal($scope.docMakeCheckModelCollection.objectID);
                        $('#addNewListItemModal').modal('hide');
                    }
                    else {
                        toastr.success(response.Message);
                    }
                }).error(function () {
                    toastr.error("Failed to revert document");
                    $scope.loading = false;
                });
        }
        //#endregion
        //#endregion
        $scope.toggleRefreshTable = function (row) {
            location.reload();
        };

        $scope.getMasterDg = function (pindex, index, master) {
            $http.get('/WorkflowModule/DocMkCkStage/GetMasterDataBySearch', {
                params: {
                    searchKey: 'm',
                    masterID: master
                }
            }).then(function (response) {
                $scope.docGenerationModelCollection.listPropsForSpecificDocType[pindex].ColumnList[index].List = response.data;
            });
        };

        $scope.getMasterMk = function (index, master) {
            $http.get('/WorkflowModule/DocMkCkStage/GetMasterDataBySearch', {
                params: {
                    searchKey: 'm',
                    masterID: master
                }
            }).then(function (response) {
                $scope.ListItems.ColumnList[index].List = response.data;
            });
        };
    });
</script>

<script type="text/javascript">
    $('.modal').on('hidden.bs.modal', function (e) {
        if ($('.modal').hasClass('in')) {
            $('body').addClass('modal-open');
        }
    });
</script>
