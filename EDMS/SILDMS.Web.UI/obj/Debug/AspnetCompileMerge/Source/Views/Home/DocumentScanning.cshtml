@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="OwnerProperIdentityCtrl">
    <div class="box-header with-border">
        <i class="fa  fa-table"></i>
        <h3 class="box-title">Document Scanning</h3>
        @*<input type="button" value="Test" ng-click="Test()" />*@
        <div class="box-tools pull-right">
            <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-default btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
        </div>
    </div>

    <div class="box-body">
        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                            ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels track by ownerLevel.OwnerLevelID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.Owner"
                            data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID"
                            data-ng-disabled="!docPropIdentityModel.OwnerLevel">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select ui-select2="{ allowClear: true}" id="select-option" ng-model="docPropIdentityModel.DocCat" data-placeholder="Document Category" style="width:100%;" class="form-control">
                        <option value=""></option>
                        <option ng-repeat="item in DocCatForOwner" value="{{item.DocCategoryID}}">{{item.DocCategoryName}}</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Doc Sub Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select ui-select2="{ allowClear: true}" id="select-option" ng-model="docPropIdentityModel.DocTyp" data-placeholder="Document Sub Category" style="width:100%;" class="form-control">
                        <option value=""></option>
                        <option ng-repeat="item in DocTypeForOwner" value="{{item.DocTypeID}}">{{item.DocTypeName}}</option>
                    </select>
                </div>
            </div>
        </div>

        <form name="metaForm" novalidate>
            <div class="row" ng-if="docPropertyForSpecificDocType.length > 0">
                <div class="col-sm-2 col-md-2 col-lg-2">
                    <div class="form-group">
                        <label>Documents</label>
                    </div>
                </div>
                <div class="col-sm-8 col-md-8 col-lg-8">

                    <div ng-repeat="docProperty in docPropertyForSpecificDocType">
                        <div>
                            <input type="checkbox" name="DocProperty" ng-model="docProperty.IsSelected"
                                   ng-change="BindDataToGrid()" /> {{docProperty.DocPropertyName}}
                        </div>

                        <div ng-if="docProperty.IsSelected && (docProperty.email || docProperty.sms)">
                            <p class="input-group col-sm-6">
                                <input type="text" class="form-control" uib-datepicker-popup ng-model="docProperty.NotifyDate" ng-change="selectDate(docProperty.NotifyDate,$index,docProperty.dateOptionsExp)" name="NotifyDate_{{$index}}" is-open="docProperty.CalNo.opened" datepicker-options="dateOptionsNotify" ng-required="true" close-text="Close" placeholder="Notification Date" />
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-default" ng-click="docProperty.CalNo.opened=!docProperty.CalNo.opened"><i class="glyphicon glyphicon-calendar"></i></button>
                                </span>
                            </p>

                            <p class="input-group col-sm-6">
                                <input type="text" class="form-control" uib-datepicker-popup ng-model="docProperty.ExpDate" name="ExpDate_{{$index}}" is-open="docProperty.CalEx.opened" datepicker-options="docProperty.dateOptionsExp" ng-required="true" close-text="Close" placeholder="ExpireDate Date" />
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-default" ng-click="docProperty.CalEx.opened=!docProperty.CalEx.opened;"><i class="glyphicon glyphicon-calendar"></i></button>
                                </span>
                            </p>
                        </div>
                    </div>

                    <input type="button" class="btn btn-flat btn-xs btn-primary" value="Select All" ng-click="SelectAll()" />
                    <input type="button" class="btn btn-flat btn-xs btn-primary" value="Unselect All" ng-click="UnSelectAll()" />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 table-responsive">
                    <table id="condencedTbl" st-table="GridDisplayCollection" st-safe-src="docPropIdentityGridData"
                           class="table table-condensed table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th st-sort="DocPropertyName">Documents</th>
                                <th st-sort="IdentificationAttribute">Identificaiton Attribute</th>
                                <th st-sort="MetaValue">Search Value</th>
                                <th st-sort="Remarks">Remarks</th>
                                <th st-sort="IsRequired">Is Required</th>
                            </tr>
                            <tr>
                                <th colspan="3">
                                    <input st-search="" placeholder="Search Documents" class="input-sm form-control" type="search" />
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="row in GridDisplayCollection"> 
                                <td class="hidden">{{row.DocMetaID}}</td>
                                <td class="hidden">{{row.DocPropertyID}}</td>
                                <td>{{row.DocPropertyName}}</td>
                                <td>{{row.IdentificationAttribute}}</td>
                                <td class="text-center">
                                    <input type="text" ng-model="row.MetaValue" class="form-control" ng-required="row.IsRequired == '1'"
                                           ng-readonly="{{row.IsAuto}}" ng-blur="revesionNo(row)" />
                                    @*<button type="button" ng-attr-class="{{'btn btn-xs btn-info btn-flat'}}" ng-show="{{row.IsObsoleteIdentity}}" ng-click="revesionNo(row)">
                                        <span class="glyphicon glyphicon-arrow-down"></span>
                                    </button>*@
                                </td>
                                <td class="text-center"><input type="text" ng-model="row.Remarks" class="form-control" /></td>
                                <td class="text-center">
                                    <span ng-attr-class="{{row.IsRequired== '1'? 'label label-danger' : 'label label-success' }}">
                                        {{row.IsRequired== '1' ? 'Required' : 'Optional' }}
                                    </span>
                                </td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="6" class="text-center">
                                    <div st-pagination="" st-items-by-page="itemsByPage" st-displayed-pages="10"></div>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </form>

        <div class="row">
            <div class="col-lg-12">
                <div class="row">

                    <!-- /.col -->
                    <div class="col-md-10">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h4 class="box-title">Process Documents:</h4>
                            </div>
                            <div class="box-body no-padding">
                                <div class="row">
                                    @*<div id="MoveImage" class="hidden">
                                        <div class="col-lg-2"></div>
                                        <div class="col-lg-10">
                                            <label>Which Image</label><input type="text" id="WhichImage" />
                                            <label>Where</label><input type="text" id="Where" />
                                            <button class="btn btn-primary btn-flat btn-sm" ng-click="MoveImage()">Move</button>
                                        </div>
                                    </div>*@
                                </div>

                                <div class="row" ng-show="uploadType==2">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-10">
                                        <input type="file" id="FileUpload1" multiple />
                                    </div>
                                </div>

                                <div class="row" ng-hide="uploadType==2">
                                    <div class="col-lg-12">
                                        <div id="dwtHorizontalThumbnil"></div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div id="external-events">
                                        <div class="col-lg-6">
                                            <div class="external-event bg-gray" style="position: relative;">
                                                Scanner
                                                <select id="source" class="form-control"></select>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="external-event bg-gray" style="position: relative;">
                                                Upload Type
                                                <select class="form-control" id="uploadType" name="uploadType" ng-model="uploadType" ng-init="uploadType='1'">
                                                    <option value="1">Normal Upload</option>
                                                    <option value="2">Other Upload</option>
                                                    <option value="3">Secure Upload</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <!-- /.box-body -->
                        </div>
                        <!-- /. box -->
                    </div>
                    <!-- /.col -->

                    <div class="col-md-2" style="padding-left:0px;">
                        <div class="box box-info">
                            <div class="box-header with-border">
                                <h4 class="box-title">Options</h4>
                            </div>
                            <div class="box-body">
                                <!-- the events -->
                                <div id="external-events">
                                    <div class="external-event bg-yellow " ng-click="AcquireImage();" style="position: relative;">
                                        <i class="fa fa-print"></i> Scan
                                    </div>

                                    <div class="external-event bg-purple" ng-click="LoadImageWithoutBlank()" style="position: relative;">
                                        <i class="fa fa-pagelines"></i> Load Blank PDF
                                    </div>
                                    <div class=" btnAnoLoad external-event bg-maroon" ng-click="Load()" style="position: relative;">
                                        <i class="fa fa-clipboard"></i> Load Another PDF
                                    </div>

                                    <div ng-click="RemoveAllSelectedImages()" class="external-event bg-light-blue " style="position: relative;">
                                        <i class="fa fa-remove"></i> Remove
                                    </div>
                                    <div ng-click="RotateRight()" class="external-event bg-red " style="position: relative;">
                                        <i class="fa fa-rotate-right"></i> Rotate
                                    </div>
                                    <div class="external-event bg-aqua " ng-click="LoadImage()" style="position: relative;">

                                        <i class="fa fa-inbox"></i> Load PDF

                                    </div>
                                    <div data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne" ng-click="ShowMoveImageDiv()" class="external-event bg-green" style="position: relative;">
                                        <i class="fa fa-reorder"></i> Move Image
                                    </div>

                                    <div id="collapseOne" aria-expanded="false" class="collapse"
                                         @*class="external-event bg-green-gradient hidden"*@
                                         style="position: relative; background-color: #baf1d4; border:solid;border-color:green;">
                                        <div style="background-color: #baf1d4">
                                            <div class="form-group">
                                                <label style="color:green">Which Image</label><input type="text" id="WhichImage" style="width: 100%; color: green" />
                                            </div>
                                            <div class="form-group">
                                                <label style="color:green">Where</label><input type="text" id="Where" style="width: 100%; color: green" />
                                            </div>
                                            <div class="form-group">
                                                <button class="btn btn-success btn-flat btn-sm" ng-click="MoveImage()">Move</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- /.box-body -->
                        </div>
                    </div>
                </div>
                <!-- /.row -->
            </div>
        </div>
        <br />
    </div>

    <div class="box-footer with-border">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <button type="button" id="btnSave" ng-disabled="metaForm.$invalid" class="btn btn-lg btn-primary btn-flat pull-right btnSave" data-ng-click="ShowConfirmModal()"><i class="fa fa-save"></i>  Save</button>
            </div>
        </div>
    </div>

    <div id="viewerModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Image Viewer</h3>
                </div>

                <div class="modal-body">
                    <div class="box-body">
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>

                        <div id="dwtLargeViewer" class="box-body"></div>
                    </div>
                </div>

                <div class="modal-footer">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="mydiv" data-ng-show="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" /> <span class="text-bold">Loading...</span>
            </div>
        </div>
    </div>

    <div id="ConfirmSave" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title">Are You Sure?</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <h4>You Want to Upload the Documents?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="yes" class="btn btn-danger" ng-disabled="loading" data-ng-click="SaveImage()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>
<script type="text/javascript" src="~/Resources/addon/dynamsoft.webtwain.addon.pdf.js"></script>
<script src="~/Content/plugin/Select2/js/select2.min.js"></script>
<script type="text/javascript">
    app.controller('OwnerProperIdentityCtrl', function ($scope, $http) {
        applySecurity();
        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        var zoomFactor = .5;
        $scope.btnShow = false;
        //$scope.files = [];

        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtHorizontalThumbnil');
            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;

            DWObject.SetViewMode(4, -1);
            DWObject.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_AUTO;
            DWObject.JPEGQuality = 20;
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;

            DWObject.RegisterEvent('OnMouseDoubleClick', $scope.updateLargeViewer);
            DWObject.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                DWObject.Erase(sImageIndex, left, top, right, bottom);
            });

            if (DWObject) {
                var count = DWObject.SourceCount;

                if (count == 0 && Dynamsoft.Lib.env.bMac) {
                    DWObject.CloseSourceManager();
                    DWObject.ImageCaptureDriverType = 0;
                    DWObject.OpenSourceManager();
                    count = DWObject.SourceCount;
                }

                for (var i = 0; i < count; i++) {
                    document.getElementById("source").options.add(new Option(DWObject.GetSourceNameItems(i), i)); // Get Data Source names from Data Source Manager and put them in a drop-down box
                }
            }

            DWObject.Addon.PDF.Download("../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
               function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
               function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            );
        };

        $scope.AcquireImage = function () {

            if (DWObject) {
                DWObject.IfAutomaticDeskew = true;
                DWObject.IfAutoDiscardBlankpages = false;
                $scope.ShowUploadImageDivVar = false;
                var OnAcquireImageSuccess, OnAcquireImageFailure;

                OnAcquireImageSuccess = OnAcquireImageFailure = function () {
                    DWObject.CloseSource();
                };

                DWObject.SelectSourceByIndex(document.getElementById("source").selectedIndex); //Use method SelectSourceByIndex to avoid the 'Select Source' dialog
                DWObject.OpenSource();

                DWObject.IfDisableSourceAfterAcquire = true;	// Scanner source will be disabled/closed automatically after the scan.
                DWObject.AcquireImage(OnAcquireImageSuccess, OnAcquireImageFailure);
            }
        };

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };

        $scope.docPropIdentityModel = {
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            DocMetaID: {},
            DocPropIdentifyID: {},
            MetaValue: {},
            DocCat: '',
            DocTyp: '',
            Remarks: {}
        };

        $scope.revesionNo = function (row, e) {
            angular.forEach($scope.GridDisplayCollection, function (item) {
                if (item.DocPropertyID == row.DocPropertyID) {
                    if (item.IsAuto && row.IsObsoleteIdentity) {
                        var str = row.MetaValue;
                        var lastSlash = str.lastIndexOf("/");
                        var revesionNo = str.substring(lastSlash + 1);

                        $http.post('/DocScanningModule/MultiDocScan/IsRevesionNoValid',
                            {
                                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                                _DocCatID: $scope.docPropIdentityModel.DocCat,
                                _DocTypID: $scope.docPropIdentityModel.DocTyp,
                                _DocPropertyID: row.DocPropertyID,
                                _DocPropIdentifyID: row.DocPropIdentifyID,
                                _modelDocumentsInfo: $scope.docPropIdentityModel,
                                _MetaValue: row.MetaValue,
                                _revesionNo: revesionNo
                            })
                            .success(function (response) {
                                var rvsNo = parseInt(response.Message) + 1;
                                item.MetaValue = rvsNo;

                                if (rvsNo !== parseInt(revesionNo)) {
                                    row.MetaValue = '';
                                    item.MetaValue = '';
                                    toastr.error("Wrong Revision Number");
                                }
                            }).error(function () {
                                //alert('not ok');
                            });
                    }
                    else {
                        return;
                    }
                }
            });
        };

        $scope.SaveImage = function () {
            $('#ConfirmSave').modal('hide');

            $scope.loading = true;
            $scope.docPropIdentityModel.DocCategory.DocCategoryID = $scope.docPropIdentityModel.DocCat;
            $scope.docPropIdentityModel.DocType.DocTypeID = $scope.docPropIdentityModel.DocTyp;

            var selectedProperties = [];

            if ($scope.docPropertyForSpecificDocType.length < 1) {
                toastr.error("No Document was Selected");
                $scope.loading = false;
                return;
            }

            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                if (item.IsSelected) {
                    selectedProperties.push({ DocPropertyID: item.DocPropertyID, HasSMS: item.sms, HasEmail: item.email, IsObsoletable: item.obsulate, NotifyDate: item.NotifyDate, ExpDate: item.ExpDate });
                };
            });

            var DocIDsCounter = 0;
            var fileUpload = $("#FileUpload1").get(0);
            var files = fileUpload.files;
            var extentionsArr = [];

            if ($scope.uploadType == '2') {
                angular.forEach(files, function (item) {
                    extentionsArr.push(item.name.split('.').pop());
                });
            }

            $http.post('/DocScanningModule/MultiDocScan/AddDocumentInfo',
                {
                    _modelDocumentsInfo: $scope.docPropIdentityModel,
                    _SelectedPropID: selectedProperties,
                    _docMetaValues: $scope.docPropIdentityGridData,
                    _otherUpload: $scope.uploadType == '2' ? true : false,
                    _extentions: extentionsArr.join(),
                    IsSecured: $scope.uploadType == '3' ? true : false
                })
                .success(function (response) {
                    $scope.loading = false;
                    var uploadCount = 0;
                    var docCounts = 0;

                    if ($scope.uploadType == '2') {

                        if (files.length > 0 && files.length == response.DistinctID.length) {
                            var breakFlag = false;

                            for (var i = 0; i < files.length || breakFlag; i++) {
                                if (window.FormData !== undefined) {
                                    var fileData = new FormData();

                                    fileData.append('serverIP', response.result[0].ServerIP);
                                    fileData.append('ftpPort', response.result[0].ServerPort);
                                    fileData.append('ftpUserName', response.result[0].FtpUserName);
                                    fileData.append('ftpPassword', response.result[0].FtpPassword);
                                    fileData.append('serverURL', response.DistinctID[i].FileServerUrl);
                                    fileData.append('documentID', response.DistinctID[i].DocumentID);
                                    fileData.append('Ext', files[i].name.split('.').pop());

                                    fileData.append(files[i].name, files[i]);

                                    $.ajax({
                                        url: '/DocScanningModule/MultiDocScan/UploadOtherFiles',
                                        type: "POST",
                                        contentType: false,
                                        processData: false,
                                        data: fileData,
                                        success: function (result) {
                                            uploadCount++;
                                            if (uploadCount == files.length) {
                                                $scope.docPropIdentityGridData = response.result;
                                                $scope.BindDataToGrid();
                                                toastr.success("Document Uploaded Succesfully");
                                                $scope.loading = false;

                                                var $el = $('#FileUpload1');
                                                $el.wrap('<form>').closest('form').get(0).reset();
                                                $el.unwrap();
                                            }
                                        },
                                        error: function (err) {
                                            toastr.error("Document Upload Falied");
                                            breakFlag = true;
                                            $scope.loading = false;
                                        }
                                    });
                                } else {
                                    toastr.error("FormData is not supported.");
                                    $scope.loading = false;
                                    break;
                                }
                            }
                        }
                        else {
                            deleteFailedDocuments(response.DistinctID)
                        }
                    }
                    else if ($scope.uploadType == '3') {
                        $scope.loading = false;

                        var imagedata = [];

                        for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {
                            if (DWObject.IsBlankImageExpress(i)) {
                                DWObject.IfShowFileDialog = false;
                                DWObject.GetSelectedImagesSize(EnumDWT_ImageType.IT_PDF);
                                imagedata.push(DWObject.SaveSelectedImagesToBase64Binary());
                                DWObject.RemoveAllSelectedImages();
                                DWObject.RemoveImage(0);
                                i = -1;
                            } else {
                                DWObject.SelectedImagesCount = i + 1;
                                DWObject.SetSelectedImageIndex(i, i);
                            }
                        }

                        if (imagedata.length > 0 && imagedata.length == response.DistinctID.length) {
                            var breakFlag = false;
                            var updateCount = 0;
                            for (var j = 0; j < imagedata.length && !breakFlag; j++) {
                                var param = encodeURIComponent("serverIP") + "=" + encodeURIComponent(response.result[0].ServerIP)
                                              + "&" + encodeURIComponent("ftpPort") + "=" + encodeURIComponent(response.result[0].ServerPort)
                                              + "&" + encodeURIComponent("ftpUserName") + "=" + encodeURIComponent(response.result[0].FtpUserName)
                                              + "&" + encodeURIComponent("ftpPassword") + "=" + encodeURIComponent(response.result[0].FtpPassword)
                                              + "&" + encodeURIComponent("serverURL") + "=" + encodeURIComponent(response.DistinctID[j].FileServerUrl)
                                              + "&" + encodeURIComponent("documentID") + "=" + encodeURIComponent(response.DistinctID[j].DocumentID)
                                              + "&" + encodeURIComponent("RemoteFile") + "=" + encodeURIComponent(imagedata[j]);

                                var ajaxRequest = new XMLHttpRequest();

                                try {
                                    ajaxRequest.open('POST', '/DocScanningModule/MultiDocScan/FilePassWord_r', true);
                                    ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                                    ajaxRequest.onreadystatechange = function () {
                                        if (ajaxRequest.readyState == 4 && ajaxRequest.status == 200) {
                                            updateCount++;
                                            if (updateCount == response.DistinctID.length) {
                                                $scope.docPropIdentityGridData = response.result;
                                                toastr.success("Upload Successful");
                                                $scope.BindDataToGrid();
                                            }
                                        }
                                        else if (ajaxRequest.readyState == 4 && ajaxRequest.status != 200) {
                                            breakFlag = true;
                                            deleteFailedDocuments(response.DistinctID)
                                        }
                                    }

                                    ajaxRequest.send(param);
                                }
                                catch (e) {
                                    break;
                                }
                            }
                        }
                        else {
                            deleteFailedDocuments(response.DistinctID)
                        }
                    }
                    else {

                        for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {
                            if (DWObject.IsBlankImageExpress(i))
                                docCounts++;
                        }

                        if (docCounts > 0 && docCounts == response.DistinctID.length) {
                            for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {

                                if (DWObject.IsBlankImageExpress(i)) {
                                    DWObject.IfShowFileDialog = false;

                                    var strFTPServer = response.result[0].ServerIP;
                                    DWObject.FTPPort = response.result[0].ServerPort;
                                    DWObject.FTPUserName = response.result[0].FtpUserName;
                                    DWObject.FTPPassword = response.result[0].FtpPassword;

                                    var isSave = DWObject.FTPUploadAsMultiPagePDF(strFTPServer,
                                        response.DistinctID[DocIDsCounter].FileServerUrl + "//" +
                                        response.DistinctID[DocIDsCounter].DocumentID + ".pdf", function () { });


                                    //var isSave = DWObject.FTPUploadAllAsPDF(strFTPServer,
                                    //    response.DistinctID[DocIDsCounter].FileServerUrl + "//" +
                                    //    response.DistinctID[DocIDsCounter].DocumentID + ".pdf", function () { });

                                    if (isSave) {
                                        DocIDsCounter++;
                                        DWObject.RemoveAllSelectedImages();
                                        DWObject.RemoveImage(0);
                                        i = -1;
                                        uploadCount++;
                                    } else {
                                        break;
                                    }
                                } else {
                                    DWObject.SelectedImagesCount = i + 1;
                                    DWObject.SetSelectedImageIndex(i, i);
                                }
                            }

                            if (uploadCount == response.DistinctID.length) {
                                $scope.docPropIdentityGridData = response.result;
                                $scope.loading = false;
                                toastr.success("Upload Successful");
                                $scope.BindDataToGrid();
                            } else {
                                deleteFailedDocuments(response.DistinctID)
                            }
                        }
                        else {
                            deleteFailedDocuments(response.DistinctID)
                        }
                    }
                })
                .error(function () {
                    $scope.loading = false;
                    toastr.error("Failed to Save Meta Data.");
                });
        };

        var deleteFailedDocuments = function (arrayDistinctID) {
            var savedDocID = new Array();
            angular.forEach(arrayDistinctID, function (item) {
                savedDocID.push(item.DocumentID);
            });

            $scope.loading = true;

            $http.post('/DocScanningModule/MultiDocScan/DeleteDocumentInfo',
            {
                _DocumentIDs: savedDocID.join()
            })
            .success(function (response) {
                $scope.loading = false;
                toastr.error("Scanned documents count is different than your selection");
            })
            .error(function () {
                $scope.loading = false;
            });
        }

        $scope.LoadImage = function () {
            DWObject.Addon.PDF.Download("../Resources/addon/Pdf.zip",  // specify the url of the add-on resource
               function () { console.log('Successfully Downloaded PDF add-on'); }, // successful callback
               function (errorCode, errorString) { alert(errorString); }  // failure callback and show error message
            );

            DWObject.Addon.PDF.SetResolution(200);
            DWObject.Addon.PDF.SetConvertMode(EnumDWT_ConverMode.CM_RENDERALL);

            DWObject.IfShowFileDialog = true;

            DWObject.RemoveAllImages();
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_PDF, function () { }, function () { });

            $scope.ShowUploadImageDivVar = false;
        };
        
        $scope.LoadImageWithoutBlank = function () {
            DWObject.IfShowFileDialog = true;
            DWObject.HTTPDownloadEx('', '/Buffer/BlankPDF/blank.pdf', 3);
            $scope.ShowUploadImageDivVar = false;
        };

        $scope.Load = function () {
            DWObject.IfShowFileDialog = true;
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_PDF);
            $scope.ShowUploadImageDivVar = false;
        };

        $scope.RemoveAllSelectedImages = function () {
            DWObject.RemoveAllSelectedImages();
        };

        $scope.RotateRight = function () {
            DWObject.RotateRight(DWObject.GetSelectedImageIndex(0));
        };

        $scope.ShowMoveImageDiv = function () {
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        };

        $scope.MoveImage = function () {
            DWObject.MoveImage(($("#WhichImage").val() - 1), ($("#Where").val() - 1));
            $("#MoveImage").toggleClass("hidden");
            $scope.ShowUploadImageDivVar = false;
        };

        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
            $('#viewerModal').modal('show');
        };

        $scope.SelectAll = function () {
            $scope.btnShow = true;
            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                item.IsSelected = true;
            });

            $scope.BindDataToGrid();
        };

        $scope.UnSelectAll = function () {
            $scope.btnShow = false;
            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                item.IsSelected = false;
            });

            $scope.BindDataToGrid();
        };

        $scope.itemsByPage = 10;
        $scope.loading = true;

        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                //$scope.docPropIdentityModel.OwnerLevel ="";
                $scope.docPropIdentityModel.OwnerLevel = response.result[0];
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });

        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal, oldVal) {
            if (newVal) {
                if (newVal != "" && newVal != oldVal) {
                    $scope.docPropIdentityModel.Owner = "";
                    $scope.docPropIdentityModel.DocCategory.DocCategoryID = "";
                    $scope.docPropIdentityModel.DocType.DocTypeID = "";
                    $scope.docPropIdentityModel.DocProperty = "";
                    $scope.docPropertyForSpecificDocType = "";
                    $scope.docPropIdentityGridData = [];

                    $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                        { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                        .success(function (response) {
                            $scope.ownersForSpecificOwnerLevel = response.result;
                            $scope.docPropIdentityModel.Owner = response.result[0];
                            $scope.loading = false;
                        }).error(function () {
                            $scope.loading = false;
                        });
                }
            }
        });

        $scope.DocCatForOwner = [];
        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory.DocCategoryID = "";
                $scope.docPropIdentityModel.DocType.DocTypeID = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.DocCatForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.DocTypeForOwner = [];
        $scope.$watch('docPropIdentityModel.DocCat', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType.DocTypeID = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];

                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.DocTypeForOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocTyp', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];
                //$scope.docPropIdentityGridData = [];

                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocTyp
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                        $scope.BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.BindDataToGrid = function () {
            var selectedPropID = new Array();
            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                if (item.IsSelected) {
                    selectedPropID.push(item.DocPropertyID);
                };
            });

            if (selectedPropID.length < 1) {
                $scope.docPropIdentityGridData = [];
                $scope.GridDisplayCollection = [];
                return;
            }

            $http.post('/DocScanningModule/MultiDocScan/GetDocPropIdentityForSelectedDocTypes',
                {
                    _DocCategoryID: $scope.docPropIdentityModel.DocCat,
                    _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                    _DocTypeID: $scope.docPropIdentityModel.DocTyp,
                    _SelectedPropID: selectedPropID.join()
                })
                .success(function (response) {
                    $scope.docPropIdentityGridData = response.objDocPropIdentifies;
                    $scope.GridDisplayCollection = response.objDocPropIdentifies;
                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });
        };

        $scope.ResetModel = function () {
            $scope.docPropIdentityModel.OwnerLevel = "";
            $scope.docPropIdentityModel.Owner = "";
            //$scope.docPropIdentityModel.DocCategory = "";
            $scope.docPropIdentityModel.DocType = "";
            $scope.docPropIdentityModel.DocProperty = "";
            $scope.docPropertyForSpecificDocType = "";
            $scope.docPropIdentityGridData = [];
        };

        $scope.toggleRefreshTable = function (row) {
            location.reload();
        };

        $scope.ShowConfirmModal = function () {

            $('#ConfirmSave').modal('show');
        };

        $scope.dateOptionsNotify = {
            minDate: new Date()
        };

        $scope.selectDate = function (NotDate, index, obj) {
            $scope.docPropertyForSpecificDocType[index].ExpDate = null;
            obj.minDate = NotDate;
        };
    });
</script>



