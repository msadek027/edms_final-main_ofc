@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="OwnerProperIdentityCtrl">

    <div class="box-header with-border">
        <div class="row">
            <div class="col-lg-6">
                <i class="fa  fa-table"></i>
                <h3 class="box-title">Search Original Document</h3>

            </div>
            <div class="col-lg-6">
                <table class="pull-right">
                    <tr>
                        <td>
                            <div class="input-group">
                                <input type="text" name="q" class="form-control" ng-model="pagingInfo.search" placeholder="Search...">
                                <span class="input-group-btn">
                                    <button type="button" name="search" id="search-btn" class="btn btn-flat" ng-click="search()"><i class="fa fa-search"></i> Search </button>
                                </span>
                            </div>
                        </td>
                        <td>
                            <div class="box-tools ">
                                <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-default btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
                            </div>
                        </td>
                    </tr>
                </table>




            </div>
        </div>

    </div>

    <div class="box-body">


        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                            ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels
                        track by ownerLevel.OwnerLevelID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.Owner"
                            data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID"
                            data-ng-disabled="!docPropIdentityModel.OwnerLevel">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="docPropIdentityModel.DocCategory"
                            data-ng-options="docCategory as docCategory.DocCategoryName for docCategory in
                         docCategoriesForSpecificOwner track by docCategory.DocCategoryID"
                            data-ng-disabled="!docPropIdentityModel.Owner">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Type</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="docPropIdentityModel.DocType"
                            data-ng-options="docType as docType.DocTypeName for docType in
                         docTypeForSpecificDocCategory track by docType.DocTypeID"
                            data-ng-disabled="!docPropIdentityModel.DocCategory">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Documents</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select class="form-control" data-ng-model="docPropIdentityModel.DocProperty"
                        data-ng-options="docProperty as docProperty.DocPropertyName for docProperty in
                         docPropertyForSpecificDocType track by docProperty.DocPropertyID"
                        data-ng-disabled="!docPropIdentityModel.DocType">
                    <option value="">--Select--</option>
                </select>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <label>Search By</label>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <select data-ng-model="docPropIdentityModel.SearchBy"
                        class="form-control" data-ng-disabled="!docPropIdentityModel.DocProperty">
                    <option value="">--Select--</option>
                    <option value="1">Required Attribute</option>
                    <option value="0">Optional Attribute</option>
                </select>

            </div>
        </div>
        <br />

        <div class="row">
            <div class="table-responsive">
                <table class="table table-condensed table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Document Name</th>
                            <th>Identificaiton Attribute</th>
                            <th>Attribute Value</th>
                            <th class="hidden">FileServerURL</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat="row in GridDisplayCollection">
                            <td class="hidden">{{row.DocumentID}}</td>
                            <td class="hidden">{{row.DocDistributionID}}</td>
                            <td class="col-lg-2">{{row.DocPropertyName}}</td>
                            <td class="col-lg-3">{{row.DocPropIdentifyName}}</td>
                            <td class="col-lg-3">{{row.MetaValue}}</td>
                            <td class="hidden">{{row.FileServerURL}}</td>
                            <td class="col-lg-4">
                                <button type="button" class="btn btn-xs btn-info btn-flat" data-ng-click="LoadImage(row)" style="display: inline-block;"><i class="fa fa-search-plus"></i> Quick View</button>
                                <button type="button" class="btn btn-xs btn-success btn-flat" data-ng-click="ShowDetailView(row)" style="display: inline-block;"><i class="fa fa-list"></i> Detail View</button>
                                <button type="button" class="btn btn-xs btn-primary btn-flat" data-ng-click="toggleEdit(row)" style="display: inline-block;"><i class="fa fa-edit"></i> Edit</button>
                                <button type="button" class="btn btn-xs btn-danger btn-flat" data-ng-click="ShowDeleteConfirmModal(row)" style="display: inline-block;"><i class="fa fa-edit"></i> Delete</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div ng-if="pagingInfo.totalItems > 0" class="text-center">
                    <ul uib-pagination total-items="pagingInfo.totalItems" ng-model="pagingInfo.page" items-per-page="{{pagingInfo.itemsPerPage}}" max-size="7" boundary-links="true" rotate="true" force-ellipses="true" ng-change="selectPage()"></ul>
                </div>
                <div ng-if="pagingInfo.totalItems <= 0" class="text-center">
                    NO ITEM
                </div>

            </div>
        </div>
        <div class="row" id="QuickView">
            <label> Your Document (Quick View): </label>
            <a class="btn btnc2 btn-app btn-flat btnPrint" ng-click="Print()">
                <i class="fa fa-print"></i> Print
            </a>

            <div id="dwtQuickViewer" class="box-body"></div>
        </div>
    </div>

    <form name="myForm" ng-submit="">
        <div class="bs-example">
            <!-- Modal HTML -->
            <div id="addModal" class="modal fade">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" ng-click="ResetModel()" aria-hidden="true">x</button>
                            <h3 class="modal-title">Change Attribute Value</h3>
                        </div>
                        <div class="modal-body">
                            <div class="box-body">
                                <div class="row">

                                    <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
                                        <div class="form-group">
                                            <label for="{{item.DocMetaID}}" class="control-label">{{item.DocPropIdentifyName}}</label>
                                            <input type="text" name="{{item.DocMetaID}}" id="{{item.DocMetaID}}" ng-model="item.MetaValue" ng-required="true" class="form-control" />
                                            <span class="label label-danger" ng-show="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">{{item.DocPropIdentifyName}} is Required.</span>
                                            <span ng-hide="myForm[item.DocMetaID].$error.required && myForm[item.DocMetaID].$touched">&nbsp;</span>
                                        </div>

                                    </div>
                                    <br />

                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    <button type="button" data-ng-click="Save()" class="btn btn-primary btn-flat" ng-disabled="myForm.$invalid || loading">Save</button>
                                    <button type="button" class="btn btn-default btn-flat" data-dismiss="modal" ng-click="ResetModel()">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div class="bs-example">
        <!-- Modal HTML -->
        <div id="DetailViewModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" ng-click="ResetModel()" aria-hidden="true">x</button>
                        <h4 class="modal-title">Document Detail View</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-lg-2">
                                <h4><label>Thumbnail:</label></h4>
                            </div>
                            <div class="col-lg-10">
                                <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                                <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-lg-2">
                                <div id="dwtVerticalThumbnil" class="box-body"></div>
                            </div>
                            <div class="col-lg-10">
                                <div id="dwtLargeViewer" class="box-body"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div id="mydiv" data-ng-show="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" /> <span class="text-bold">Loading...</span>
            </div>
        </div>
    </div>

    <div id="ConfirmDelete" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Are You Sure?</h4>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <input type="hidden" ng-model="DocumentIDForDelete" />
                            <h4>You Want to Delete the Document?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="yes" class="btn btn-danger" ng-disabled="loading" data-ng-click="DeleteDocument()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>

<script type="text/javascript">

    app.controller('OwnerProperIdentityCtrl', function ($scope, $http) {
        //applySecurity();
        $scope.docPropIdentityModel = {
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            SearchBy: "",
            SearchFor: "",
            Status: ""
        };

        $scope.pagingInfo = {
            page: 1,
            itemsPerPage: 20,
            sortBy: null,
            reverse: false,
            search: null,
            totalItems: 0
        };


        $scope.search = function () {
            $scope.pagingInfo.page = 1;
            $scope.BindDataToGrid();
        };

        $scope.sort = function (sortBy) {
            if (sortBy === $scope.pagingInfo.sortBy) {
                $scope.pagingInfo.reverse = !$scope.pagingInfo.reverse;
            } else {
                $scope.pagingInfo.sortBy = sortBy;
                $scope.pagingInfo.reverse = false;
            }
            $scope.pagingInfo.page = 1;
            $scope.BindDataToGrid();
        };

        $scope.selectPage = function () {
            $scope.BindDataToGrid();
        };


        $scope.ShowDeleteConfirmModal = function (row) {
            $scope.DocumentIDForDelete = row.DocumentID;
            $('#ConfirmDelete').modal('show');
        };

        $scope.DeleteDocument = function () {
            $scope.loading = true;
            $http.post('/DocScanningModule/OriginalDocSearching/DeleteDocument',
            {
                _DocumentID: $scope.DocumentIDForDelete,
                _DocumentType: "Original"
            })
            .success(function (response) {
                $('#ConfirmDelete').modal('hide');
                $scope.BindDataToGrid();
                $scope.WildSearch();
                $scope.loading = false;
                toastr.success("Delete Successful");
            }).error(function () {
                $scope.loading = false;
                toastr.error("Delete Failed");
            });
        };


        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        var DWObjectQuickViewer;
        var zoomFactor = .5;

        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtVerticalThumbnil');
            DWObjectQuickViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtQuickViewer');
            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectQuickViewer.SetViewMode(1, 1);

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;

            DWObject.SetViewMode(-1, 4);
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;

            DWObject.RegisterEvent('OnMouseClick', $scope.updateLargeViewer);

        };

        $scope.ResetImageViewrs = function () {
            //DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();
            DWObjectQuickViewer.RemoveAllImages();

        }

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };

        $scope.LoadImage = function (tableRow, e) {
            DWObjectQuickViewer.IfShowFileDialog = false;
            DWObjectQuickViewer.RemoveAllImages();

            //DWObjectQuickViewer.FTPPort = tableRow.ServerPort;
            //DWObjectQuickViewer.FTPUserName = tableRow.FtpUserName;
            //DWObjectQuickViewer.FTPPassword = tableRow.FtpPassword;
 
            DWObjectQuickViewer.HTTPDownloadEx("https://localhost:44300/", "DocScanningModule/MultiDocScan/GetFilePassWord?" + encodeURIComponent("serverIP") + "=" + encodeURIComponent(tableRow.ServerIP)
                + "&"+ encodeURIComponent("ftpPort")+"=" + encodeURIComponent(tableRow.ServerPort)
                + "&"+ encodeURIComponent("ftpUserName")+"=" +  encodeURIComponent(tableRow.FtpUserName)
                + "&"+ encodeURIComponent("ftpPassword")+"=" +  encodeURIComponent(tableRow.FtpPassword)
                + "&" + encodeURIComponent("serverURL")+"=" +  encodeURIComponent(tableRow.FileServerURL)
                + "&"+encodeURIComponent("documentID")+"=" +  encodeURIComponent(tableRow.DocumentID), 4);

            

        };

        $scope.Print = function () {
            DWObjectQuickViewer.Print();
        };


        //$scope.Test = function () {
        //    //DWObjectQuickViewer.PDFKeywords = "Test";
        //    alert(DWObjectQuickViewer.PDFKeywords);
        //    //alert(DWObjectQuickViewer.ErrorString);
        //};

        $scope.ShowDetailView = function (tableRow, e) {
            DWObject.IfShowFileDialog = false;
            DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();
            DWObject.FTPPort = tableRow.ServerPort;
            DWObject.FTPUserName = tableRow.FtpUserName;
            DWObject.FTPPassword = tableRow.FtpPassword;
            DWObject.FTPDownload(tableRow.ServerIP, (tableRow.FileServerURL + "//" +
                tableRow.DocumentID + ".pdf"));
            $('#DetailViewModal').modal('show');

            //alert(tableRow.FileServerURL + "//" +
            //    tableRow.DocumentID + ".pdf");
        };

        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
        };


        $scope.DocumentIDForDelete = "";
        $scope.loading = true;


        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                $scope.docPropIdentityModel.OwnerLevel = "";
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });


        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.Owner = "";
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropIdentityModel.SearchBy = "";
                $scope.docPropIdentityGridData = [];
                $scope.ResetImageViewrs();
                $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                    { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                    .success(function (response) {
                        $scope.ownersForSpecificOwnerLevel = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropIdentityModel.SearchBy = "";
                $scope.docPropIdentityGridData = [];
                $scope.ResetImageViewrs();
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocCategory', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropIdentityModel.SearchBy = "";
                $scope.docPropIdentityGridData = [];
                $scope.ResetImageViewrs();
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocType', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropIdentityModel.SearchBy = "";
                $scope.docPropIdentityGridData = [];
                $scope.ResetImageViewrs();

                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                        //$scope.BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocProperty', function (newVal) {

            if (newVal) {
                $scope.docPropIdentityModel.SearchBy = "";
                $scope.docPropIdentityGridData = [];
                $scope.ResetImageViewrs();
            }
        });

        $scope.$watch('docPropIdentityModel.SearchBy', function (newVal) {
            if (newVal) {

                $scope.BindDataToGrid();
                $scope.ResetImageViewrs();

            }
        });

        $scope.BindDataToGrid = function () {
            $scope.loading = true;
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocumentsBySearchParam',
            {
                _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID,
                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
                _SearchBy: $scope.docPropIdentityModel.SearchBy,
                page: $scope.pagingInfo.page,
                itemsPerPage: $scope.pagingInfo.itemsPerPage,
                sortBy: $scope.pagingInfo.itemsPerPage,
                reverse: $scope.pagingInfo.reverse,
                search: $scope.pagingInfo.search,
            })
            .success(function (pageable) {
                $scope.GridDisplayCollection = pageable.lstDocSearch;
                $scope.pagingInfo.totalItems = pageable.totalPages;
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });

        };


        $scope.ResetModel = function () {
        };

        $scope.toggleEdit = function (tableRow) {
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSpecificDocType',
            {
                _DocumentID: tableRow.DocumentID,
                _DocDistributionID: tableRow.DocDistributionID
            })
                .success(function (response) {
                    $scope.DocumentsAttributeList = response;
                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });

            $('#addModal').modal('show');
        };


        var DocMetaValues = {
            MetaValue: "",
            DocMetaID: ""
        };

        var FinalObject = { "DocMetaValues": [] };



        $scope.Save = function () {
            $scope.loading = true;

            angular.forEach($scope.DocumentsAttributeList, function (item) {

                DocMetaValues.DocMetaID = item.DocMetaID;
                DocMetaValues.MetaValue = item.MetaValue;

                FinalObject.DocMetaValues.push(DocMetaValues);

                DocMetaValues = {
                    MetaValue: "",
                    DocMetaID: ""
                };

            });

            $.ajax({
                url: '/DocScanningModule/OriginalDocSearching/UpdateDocMetaInfo',
                data: JSON.stringify(FinalObject),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                //async: false,
                success: function (response) {
                    $scope.loading = false;
                    $('#addModal').modal('hide');
                    $scope.BindDataToGrid();
                    toastr.success(response.Message);
                },
                error: function (response) {
                    $scope.loading = false;
                    toastr.error(response.Message);
                }
            });

            FinalObject = { "DocMetaValues": [] };
        }

        $scope.toggleRefreshTable = function (row) {
            location.reload();
        };


    });

    app.directive('editInPlace', function () {
        return {
            restrict: 'E',
            scope: { value: '=' },
            template: '<input ng-model="value"></input>',
            link: function ($scope, element, attrs) {
                // Let's get a reference to the input element, as we'll want to reference it.
                var inputElement = angular.element(element.children()[1]);

                // This directive should have a set class so we can style it.
                element.addClass('edit-in-place');

                // Initially, we're not editing.
                $scope.editing = false;

                // ng-click handler to activate edit-in-place
                $scope.edit = function () {
                    $scope.editing = true;

                    // We control display through a class on the directive itself. See the CSS.
                    element.addClass('active');

                    // And we must focus the element.
                    // `angular.element()` provides a chainable array, like jQuery so to access a native DOM function,
                    // we have to reference the first element in the array.
                    inputElement[0].focus();
                };

                // When we leave the input, we're done editing.
                inputElement.prop('onblur', function () {
                    $scope.editing = false;
                    element.removeClass('active');
                });
            }
        };
    });

</script>



